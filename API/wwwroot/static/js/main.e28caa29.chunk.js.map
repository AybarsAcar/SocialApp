{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyDateInput.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfileEdit.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/common/util/hooks.ts","features/users/RegisterSuccess.tsx","features/users/ConfirmEmail.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","console","log","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","image","displayName","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","state","createActivity","attendee","newActivity","hostUsername","attendees","runInAction","updateActivity","updatedActivity","getActivity","act","deleteActivity","loadActivity","isGoing","some","isHost","host","find","x","Date","updateAttendence","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followerCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activities","reduce","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","userActivities","loadingActivities","activeTab","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setApploaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComments","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","vertical","size","style","width","marginTop","Header","icon","attached","color","Item","active","has","onClick","onChange","Reveal","animated","Content","visible","Button","fluid","hidden","basic","e","preventDefault","handleFollow","Card","as","Link","to","Image","src","Description","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","isLoggedIn","inverted","fixed","Container","NavLink","exact","header","alt","marginRight","positive","position","avatar","spaced","Dropdown","pointing","text","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","i","validationSchema","Yup","required","isValid","dirty","Divider","LoadingComponent","Dimmer","DateInput","helpers","selected","setValue","MyTextArea","MySelectInput","Select","clearable","options","onBlur","setTouched","categoryOptions","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","MyDateInput","placeholderText","showTimeSelect","timeCaption","dateFormat","border","Comment","resetForm","onKeyPress","shiftKey","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","err","primary","NotFound","Inline","message","Modal","onClose","Statistic","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","PrivateRoute","Component","component","rest","useQuery","useLocation","search","success","Status","setStatus","handleConfirmEmailAddress","getBody","location","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityForm","ActivityDetails","ProfilePage","RegisterSuccess","ConfirmEmail","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.e28caa29.chunk.js","sourcesContent":["export interface Pagination {\n  currentPage: number;\n  itemsPerPage: number;\n  totalItems: number;\n  totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n  data: T;\n  pagination: Pagination;\n\n  constructor(data: T, pagination: Pagination) {\n    this.data = data;\n    this.pagination = pagination;\n  }\n}\n\n/**\n * the params passed to the server\n */\nexport class PagingParams {\n  pageNumber: number;\n  pageSize: number;\n\n  constructor(pageNumber = 1, pageSize = 2) {\n    this.pageNumber = pageNumber;\n    this.pageSize = pageSize;\n  }\n}\n","//\n// This file will contain all our requests\n// to our Servers\n//\n\nimport axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\n// add some delay to our requests - for development\nconst sleep = (delay: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n};\n\n// set the default url that axios uses\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\n// inteceptor to send our token with requests\naxios.interceptors.request.use((config) => {\n  const token = store.commonStore.token;\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  return config;\n});\n\n// set the axios interceptors\n// delay all requests to the Server by 1 second\naxios.interceptors.response.use(\n  async (response) => {\n    if (process.env.NODE_ENV === 'development') {\n      // add delay for testin in development\n      await sleep(1000);\n    }\n\n    const pagination = response.headers['pagination'];\n\n    if (pagination) {\n      response.data = new PaginatedResult(\n        response.data,\n        JSON.parse(pagination)\n      );\n\n      return response as AxiosResponse<PaginatedResult<any>>;\n    }\n\n    return response;\n  },\n  (error: AxiosError) => {\n    const { data, status, config, headers } = error.response!;\n\n    console.log(error.response);\n\n    switch (status) {\n      case 400:\n        if (typeof data === 'string') {\n          // otherwise, other 400 errors so just display the repsonse data from the API\n          toast.error(data);\n        }\n\n        if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n          // bad guid validation\n          history.push('/not-found');\n        }\n\n        if (data.errors) {\n          // we have the errors object available - form validation error\n\n          const modalStateErrors = [];\n\n          for (const key in data.errors) {\n            if (data.errors[key]) {\n              modalStateErrors.push(data.errors[key]);\n            }\n          }\n          throw modalStateErrors.flat();\n        }\n\n        break;\n\n      case 401:\n        if (\n          status === 401 &&\n          headers['www-authenticate']?.startsWith(\n            'Bearer error=\"invalid_token\"'\n          )\n        ) {\n          store.userStore.logout();\n          toast.error('Session expired, please login again');\n        }\n        break;\n\n      case 404:\n        history.push('/not-found');\n        break;\n\n      case 500:\n        store.commonStore.setServerError(data);\n        history.push('/server-error');\n        break;\n    }\n    return Promise.reject;\n  }\n);\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\n// this is our requests that we will make to the base URL\n// just to make the code reusable\nconst requests = {\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n  post: <T>(url: string, body: {}) =>\n    axios.post<T>(url, body).then(responseBody),\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n  del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n};\n\nconst Activities = {\n  // list all the activities\n  list: (params: URLSearchParams) =>\n    axios\n      .get<PaginatedResult<Activity[]>>('/activities', { params: params })\n      .then(responseBody),\n\n  details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n\n  create: (activity: ActivityFormValues) =>\n    requests.post<void>('/activities', activity),\n\n  update: (activity: ActivityFormValues) =>\n    requests.put<void>(`/activities/${activity.id}`, activity),\n\n  delete: (id: string) => requests.del<void>(`/activities/${id}`),\n\n  attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\n};\n\nconst Account = {\n  // gets the current user\n  current: () => requests.get<User>('/account'),\n\n  login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n\n  register: (user: UserFormValues) =>\n    requests.post<User>('/account/register', user),\n\n  // facebook login\n  fbLogin: (accessToken: string) =>\n    requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\n\n  refreshToken: () => requests.post<User>('/account/refreshToken', {}),\n\n  verifyEmail: (token: string, email: string) =>\n    requests.post<void>(\n      `/account/verifyEmail?token=${token}&email=${email}`,\n      {}\n    ),\n\n  resendEmailConfirm: (email: string) =>\n    requests.get(`/account/resendEmailConfirmationLink?email=${email}`),\n};\n\n// send request to Profiles endpoints\nconst Profiles = {\n  get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n  uploadPhoto: (file: Blob) => {\n    let formData = new FormData();\n    formData.append('File', file);\n    return axios.post<Photo>('photos', formData, {\n      headers: { 'Content-type': 'multipart/form-data' },\n    });\n  },\n\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n\n  deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n\n  updateProfile: (profile: Partial<Profile>) =>\n    requests.put('/profiles', profile),\n\n  updateFollowing: (username: string) =>\n    requests.post(`/follow/${username}`, {}),\n\n  listFollowings: (username: string, predicate: string) =>\n    requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n\n  listActivities: (username: string, predicate: string) =>\n    requests.get<UserActivity[]>(\n      `/profiles/${username}/activities?predicate=${predicate}`\n    ),\n};\n\nconst agent = {\n  Activities,\n  Account,\n  Profiles,\n};\n\nexport default agent;\n","import { act } from 'react-dom/test-utils';\nimport { ObjectSchema } from 'yup';\nimport { Profile } from './profile';\n\nexport interface Activity {\n  id: string;\n  title: string;\n  date: Date | null;\n  description: string;\n  category: string;\n  city: string;\n  venue: string;\n\n  hostUsername?: string;\n\n  isCancelled?: boolean;\n\n  isGoing?: boolean; // whether a user is going\n\n  isHost?: boolean; // wheter the logged in user is the host\n\n  host?: Profile;\n\n  attendees?: Profile[];\n}\n\nexport class Activity implements Activity {\n  constructor(init?: ActivityFormValues) {\n    Object.assign(this, init); // populates all of the properties that it can\n  }\n}\n\nexport class ActivityFormValues {\n  id?: string = undefined;\n  title: string = '';\n  category: string = '';\n  description: string = '';\n  date: Date | null = null;\n  city: string = '';\n  venue: string = '';\n\n  constructor(activity?: ActivityFormValues) {\n    if (activity) {\n      this.id = activity.id;\n      this.title = activity.title;\n      this.category = activity.category;\n      this.description = activity.description;\n      this.date = activity.date;\n      this.venue = activity.venue;\n      this.city = activity.city;\n    }\n  }\n}\n","import { User } from './user';\n\nexport interface Profile {\n  username: string;\n  displayName: string;\n  image?: string;\n  bio?: string;\n  photos?: Photo[];\n\n  followerCount: number;\n  followingCount: number;\n  following: boolean;\n}\n\nexport class Profile implements Profile {\n  constructor(user: User) {\n    this.username = user.username;\n    this.image = user.image;\n    this.displayName = user.displayName;\n  }\n}\n\nexport interface Photo {\n  id: string;\n  url: string;\n  isMain: boolean;\n}\n\nexport interface UserActivity {\n  activityId: string;\n  title: string;\n  category: string;\n  date: Date;\n}\n","//\n// Class that stores the state related to activity\n//\n\nimport { format } from 'date-fns';\nimport { makeAutoObservable, reaction, runInAction } from 'mobx';\nimport { act } from 'react-dom/test-utils';\nimport agent from '../api/agent';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { Pagination, PagingParams } from '../models/pagination';\nimport { Profile } from '../models/profile';\nimport { store } from './store';\n\nexport default class ActivityStore {\n  // class properties are observables\n  public activityRegistry = new Map<string, Activity>();\n\n  selectedActivity: Activity | undefined = undefined;\n  editMode = false;\n  loading = false;\n  loadingInitial = false;\n  pagination: Pagination | null = null;\n  pagingParams = new PagingParams();\n\n  // used for filtering for query string parameters\n  predicate = new Map().set('all', true);\n\n  constructor() {\n    makeAutoObservable(this);\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.pagingParams = new PagingParams();\n        this.activityRegistry.clear();\n        this.loadActivities();\n      }\n    );\n  }\n\n  setPagingParams = (pagingParams: PagingParams) => {\n    this.pagingParams = pagingParams;\n  };\n\n  /**\n   *\n   * @param predicate\n   * @param value\n   */\n  setPredicate = (predicate: string, value: string | Date) => {\n    const resetPredicate = () => {\n      this.predicate.forEach((value, key) => {\n        if (key !== 'startDate') this.predicate.delete(key);\n      });\n    };\n\n    switch (predicate) {\n      case 'all':\n        resetPredicate();\n        this.predicate.set('all', true);\n        break;\n\n      case 'isGoing':\n        resetPredicate();\n        this.predicate.set('isGoing', true);\n        break;\n\n      case 'isHost':\n        resetPredicate();\n        this.predicate.set('isHost', true);\n        break;\n\n      case 'startDate':\n        this.predicate.delete('startDate');\n        this.predicate.set('startDate', value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  /**\n   * create the search params\n   */\n  get axiosParams() {\n    const params = new URLSearchParams();\n    params.append('pageNumber', this.pagingParams.pageNumber.toString());\n    params.append('pageSize', this.pagingParams.pageSize.toString());\n\n    this.predicate.forEach((value, key) => {\n      if (key === 'startDate') {\n        params.append(key, (value as Date).toISOString());\n      }\n\n      params.append(key, value);\n    });\n\n    return params;\n  }\n\n  /**\n   * computed property\n   * returns the activities in an array sorted by date\n   */\n  get activities() {\n    return Array.from(this.activityRegistry.values()).sort(\n      (a, b) => a.date!.getTime() - b.date!.getTime()\n    );\n  }\n\n  /**\n   * groups the activities based on their date\n   * we use the date of the activities of the key\n   * and the value is an array of activities\n   */\n  get groupedActivities() {\n    return Object.entries(\n      this.activities.reduce((activities, activity) => {\n        const date = format(activity.date!, 'dd MMM yyyy');\n        activities[date] = activities[date]\n          ? [...activities[date], activity]\n          : [activity];\n        return activities;\n      }, {} as { [key: string]: Activity[] })\n    );\n  }\n\n  // class methods are actions by default\n  loadActivities = async () => {\n    this.loadingInitial = true;\n\n    try {\n      const result = await agent.Activities.list(this.axiosParams);\n\n      result.data.forEach((activity) => {\n        this.setActivity(activity);\n      });\n      this.setPagination(result.pagination);\n      this.setLoadingInitial(false);\n    } catch (error) {\n      console.log(error);\n\n      this.setLoadingInitial(false);\n    }\n  };\n\n  setPagination = (pagination: Pagination) => {\n    this.pagination = pagination;\n  };\n\n  setLoadingInitial = (state: boolean) => {\n    this.loadingInitial = state;\n  };\n\n  createActivity = async (activity: ActivityFormValues) => {\n    // add the user as an attendee and set as host\n    const user = store.userStore.user;\n    const attendee = new Profile(user!);\n\n    try {\n      await agent.Activities.create(activity);\n\n      const newActivity = new Activity(activity);\n\n      newActivity.hostUsername = user!.username;\n      newActivity.attendees = [attendee];\n\n      this.setActivity(newActivity);\n\n      runInAction(() => {\n        this.selectedActivity = newActivity;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  updateActivity = async (activity: ActivityFormValues) => {\n    try {\n      await agent.Activities.update(activity);\n\n      runInAction(() => {\n        if (activity.id) {\n          let updatedActivity = { ...this.getActivity(activity.id), ...act };\n          this.activityRegistry.set(activity.id, updatedActivity as Activity);\n          this.selectedActivity = activity as Activity;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  deleteActivity = async (id: string) => {\n    this.loading = true;\n    try {\n      await agent.Activities.delete(id);\n\n      runInAction(() => {\n        this.activityRegistry.delete(id);\n\n        this.loading = false;\n      });\n    } catch (error) {\n      console.log(error);\n\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  /**\n   * Method to load an individual activity\n   * this method is called when the user refreshed the Activity Detail page\n   * when we dont have the activity in memory\n   */\n  loadActivity = async (id: string) => {\n    let activity = this.getActivity(id);\n\n    if (activity) {\n      this.selectedActivity = activity;\n\n      return activity;\n    } else {\n      this.loadingInitial = true;\n\n      try {\n        activity = await agent.Activities.details(id);\n        this.setActivity(activity);\n        this.selectedActivity = activity;\n        this.setLoadingInitial(false);\n\n        return activity;\n      } catch (error) {\n        console.log(error);\n        this.setLoadingInitial(false);\n      }\n    }\n  };\n\n  private getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  };\n\n  /**\n   * sets the activity as it is loaded\n   * @param activity\n   */\n  private setActivity = (activity: Activity) => {\n    // get hold onto the user object - either null if not logged in or the user\n    const user = store.userStore.user;\n\n    if (user) {\n      // some returns a boolean - true if they are in the attendees list\n      activity.isGoing = activity.attendees!.some(\n        (a) => a.username === user.username\n      );\n\n      // set the activity isHost flag\n      activity.isHost = activity.hostUsername === user.username;\n\n      // set hte host\n      activity.host = activity.attendees?.find(\n        (x) => x.username === activity.hostUsername\n      );\n    }\n\n    activity.date = new Date(activity.date!);\n    this.activityRegistry.set(activity.id, activity);\n  };\n\n  /**\n   * this will work as a toggle\n   */\n  updateAttendence = async () => {\n    // get the cached in user\n    const user = store.userStore.user;\n\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.selectedActivity!.id);\n      runInAction(() => {\n        if (this.selectedActivity?.isGoing) {\n          this.selectedActivity.attendees =\n            this.selectedActivity.attendees?.filter(\n              (a) => a.username !== user?.username\n            );\n          this.selectedActivity.isGoing = false;\n        } else {\n          // create a user profile\n          const attendee = new Profile(user!);\n          this.selectedActivity?.attendees?.push(attendee);\n          this.selectedActivity!.isGoing = true;\n        }\n\n        this.activityRegistry.set(\n          this.selectedActivity!.id,\n          this.selectedActivity!\n        );\n      });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      runInAction(() => (this.loading = false));\n    }\n  };\n\n  cancelActivityToggle = async () => {\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.selectedActivity!.id);\n      runInAction(() => {\n        this.selectedActivity!.isCancelled =\n          !this.selectedActivity!.isCancelled;\n\n        this.activityRegistry.set(\n          this.selectedActivity!.id,\n          this.selectedActivity!\n        );\n      });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  clearSelectedActivity = () => {\n    this.selectedActivity = undefined;\n  };\n\n  updateAttendeeFollowing = (username: string) => {\n    this.activityRegistry.forEach((activity) => {\n      activity.attendees?.forEach((attendee) => {\n        if (attendee.username === username) {\n          attendee.following\n            ? attendee.followerCount--\n            : attendee.followerCount++;\n\n          attendee.following = !attendee.following;\n        }\n      });\n    });\n  };\n}\n","import { makeAutoObservable, reaction, runInAction } from 'mobx';\nimport agent from '../api/agent';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { store } from './store';\n\n/**\n * Profile state cached in our client\n */\nexport default class ProfileStore {\n  profile: Profile | null = null;\n  loadingProfile = false;\n  uploading = false;\n  loading = false;\n  followings: Profile[] = [];\n  loadingFollowings = false;\n\n  userActivities: UserActivity[] = [];\n  loadingActivities = false;\n\n  activeTab = 0;\n\n  constructor() {\n    makeAutoObservable(this);\n\n    reaction(\n      () => this.activeTab,\n      (activeTab) => {\n        if (activeTab === 3 || activeTab === 4) {\n          const predicate = activeTab === 3 ? 'followers' : 'followings';\n          this.loadFollowings(predicate);\n        } else {\n          this.followings = [];\n        }\n      }\n    );\n  }\n\n  setActiveTab = (activeTab: any) => {\n    this.activeTab = activeTab;\n  };\n\n  /**\n   * returns if the profile displayed belongs to the currently logged in user\n   */\n  get isCurrentUser() {\n    if (store.userStore.user && this.profile) {\n      return store.userStore.user.username === this.profile.username;\n    }\n    return false;\n  }\n\n  loadProfile = async (username: string) => {\n    this.loadingProfile = true;\n\n    try {\n      const profile = await agent.Profiles.get(username);\n      runInAction(() => {\n        this.profile = profile;\n        this.loadingProfile = false;\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => {\n        this.loadingProfile = false;\n      });\n    }\n  };\n\n  uploadPhoto = async (file: Blob) => {\n    this.uploading = true;\n\n    try {\n      const response = await agent.Profiles.uploadPhoto(file);\n\n      const photo = response.data;\n\n      runInAction(() => {\n        if (this.profile) {\n          this.profile.photos?.push(photo); // add to local state\n\n          if (photo.isMain && store.userStore.user) {\n            store.userStore.setImage(photo.url);\n            this.profile.image = photo.url;\n          }\n        }\n\n        this.uploading = false;\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => {\n        this.uploading = false;\n      });\n    }\n  };\n\n  setMainPhoto = async (photo: Photo) => {\n    this.loading = true;\n\n    try {\n      await agent.Profiles.setMainPhoto(photo.id); // update on the server\n\n      // update in the client\n      store.userStore.setImage(photo.url);\n\n      runInAction(() => {\n        if (this.profile && this.profile.photos) {\n          this.profile.photos.find((p) => p.isMain)!.isMain = false;\n          this.profile.photos.find((p) => p.id === photo.id)!.isMain = true;\n          this.profile.image = photo.url;\n\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  deletePhoto = async (photo: Photo) => {\n    this.loading = true;\n\n    try {\n      await agent.Profiles.deletePhoto(photo.id);\n\n      runInAction(() => {\n        if (this.profile) {\n          this.profile.photos = this.profile.photos?.filter(\n            (p) => p.id !== photo.id\n          );\n\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  updateProfile = async (profile: Partial<Profile>) => {\n    this.loading = true;\n\n    try {\n      await agent.Profiles.updateProfile(profile);\n\n      runInAction(() => {\n        if (\n          profile.displayName &&\n          profile.displayName !== store.userStore.user?.displayName\n        ) {\n          store.userStore.setDisplayName(profile.displayName);\n        }\n\n        this.profile = { ...this.profile, ...(profile as Profile) };\n        this.loading = false;\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  /**\n   *\n   * @param username target user\n   * @param following what we are about the set the following status to\n   * @returns\n   */\n  updateFollowing = async (username: string, following: boolean) => {\n    this.loading = true;\n\n    try {\n      await agent.Profiles.updateFollowing(username);\n\n      store.activityStore.updateAttendeeFollowing(username);\n\n      runInAction(() => {\n        if (\n          this.profile &&\n          this.profile.username !== store.userStore.user?.username &&\n          this.profile.username === username\n        ) {\n          // it the user is not currently logged in user\n          following\n            ? this.profile.followerCount++\n            : this.profile.followerCount--;\n          this.profile.following = !this.profile.following;\n        }\n\n        if (\n          this.profile &&\n          this.profile.username === store.userStore.user?.username\n        ) {\n          following\n            ? this.profile.followingCount++\n            : this.profile.followingCount--;\n        }\n\n        this.followings.forEach((profile) => {\n          if (profile.username === username) {\n            profile.following\n              ? profile.followerCount--\n              : profile.followerCount++;\n            profile.following = !profile.following;\n          }\n        });\n\n        this.loading = false;\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => (this.loading = false));\n    }\n  };\n\n  loadFollowings = async (predicate: string) => {\n    this.loadingFollowings = true;\n\n    try {\n      const followings = await agent.Profiles.listFollowings(\n        this.profile!.username,\n        predicate\n      );\n\n      runInAction(() => {\n        this.followings = followings;\n        this.loadingFollowings = false;\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => (this.loadingFollowings = false));\n    }\n  };\n\n  loadUserActivities = async (username: string, predicate?: string) => {\n    this.loadingActivities = true;\n\n    try {\n      const activities = await agent.Profiles.listActivities(\n        username,\n        predicate!\n      );\n\n      runInAction(() => {\n        this.userActivities = activities;\n        this.loadingActivities = false;\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => (this.loadingActivities = false));\n    }\n  };\n}\n","import { makeAutoObservable, runInAction } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from './store';\n\nexport default class UserStore {\n  user: User | null = null;\n\n  fbAccessToken: string | null = null;\n  fbLoading = false;\n\n  refreshTokenTimeout: any;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  get isLoggedIn() {\n    return !!this.user;\n  }\n\n  login = async (creds: UserFormValues) => {\n    try {\n      const user = await agent.Account.login(creds);\n\n      // set the token\n      store.commonStore.setToken(user.token);\n\n      this.startRefreshTokenTimer(user);\n\n      runInAction(() => {\n        this.user = user;\n      });\n\n      history.push('/activities');\n      store.modalStore.closeModal();\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  logout = () => {\n    store.commonStore.setToken(null);\n    window.localStorage.removeItem('jwt');\n    this.user = null;\n    history.push('/');\n  };\n\n  getUser = async () => {\n    try {\n      const user = await agent.Account.current();\n\n      store.commonStore.setToken(user.token);\n\n      runInAction(() => {\n        this.user = user;\n      });\n\n      this.startRefreshTokenTimer(user);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  register = async (creds: UserFormValues) => {\n    try {\n      await agent.Account.register(creds);\n\n      history.push(`/account/registerSuccess?email=${creds.email}`);\n      store.modalStore.closeModal();\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  setImage = async (image: string) => {\n    if (this.user) this.user.image = image;\n  };\n\n  setDisplayName = (name: string) => {\n    if (this.user) this.user.displayName = name;\n  };\n\n  getFacebookLoginStatus = async () => {\n    window.FB.getLoginStatus((response) => {\n      if (response.status === 'connected') {\n        this.fbAccessToken = response.authResponse.accessToken;\n      }\n    });\n  };\n\n  /**\n   * facebook login\n   * api mehtod called and changes made to our store\n   * request to the facebook APIs\n   */\n  facebookLogin = () => {\n    this.fbLoading = true;\n\n    const apiLogin = (accessToken: string) => {\n      agent.Account.fbLogin(accessToken)\n        .then((user) => {\n          store.commonStore.setToken(user.token);\n\n          this.startRefreshTokenTimer(user);\n\n          runInAction(() => {\n            this.user = user;\n            this.fbLoading = false;\n          });\n\n          history.push('/activities');\n        })\n        .catch((error) => {\n          console.log(error);\n          runInAction(() => (this.fbLoading = false));\n        });\n    };\n\n    if (this.fbAccessToken) {\n      // if we already have the access token\n      apiLogin(this.fbAccessToken);\n    } else {\n      // get a new accessToken from facebook\n      window.FB.login(\n        (response) => {\n          apiLogin(response.authResponse.accessToken);\n        },\n        { scope: 'public_profile,email' }\n      );\n    }\n  };\n\n  /**\n   * this method is automatically called when the user token is about to expire\n   * so the user is logged in throughout their session without distruption\n   */\n  refreshToken = async () => {\n    this.stopRefreshTokenTimer();\n\n    try {\n      const user = await agent.Account.refreshToken();\n\n      runInAction(() => (this.user = user));\n\n      store.commonStore.setToken(user.token);\n\n      this.startRefreshTokenTimer(user);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  private startRefreshTokenTimer(user: User) {\n    const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\n    const expires = new Date(jwtToken.exp * 1000);\n    const timeout = expires.getTime() - Date.now() - 60 * 1000; // 60 seconds before hte token expires\n\n    this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\n  }\n\n  private stopRefreshTokenTimer() {\n    clearTimeout(this.refreshTokenTimeout);\n  }\n}\n","//\n// Main Store to export all the state stores stores\n//\n\nimport { useContext } from 'react';\nimport { createContext } from 'react';\nimport ActivityStore from './activityStore';\nimport CommentStore from './commentStore';\nimport CommonStore from './commonStore';\nimport { ModalStore } from './modalStore';\nimport ProfileStore from './profileStore';\nimport UserStore from './userStore';\n\ninterface Store {\n  activityStore: ActivityStore;\n  commonStore: CommonStore;\n  userStore: UserStore;\n  modalStore: ModalStore;\n  profileStore: ProfileStore;\n  commentStore: CommentStore;\n}\n\nexport const store: Store = {\n  activityStore: new ActivityStore(),\n  commonStore: new CommonStore(),\n  userStore: new UserStore(),\n  modalStore: new ModalStore(),\n  profileStore: new ProfileStore(),\n  commentStore: new CommentStore(),\n};\n\nexport const StoreContext = createContext(store);\n\n// custom react hook to use our stores\nexport function useStore() {\n  return useContext(StoreContext);\n}\n","import { makeAutoObservable, reaction } from 'mobx';\nimport { ServerError } from '../models/serverError';\n\nexport default class CommonStore {\n  error: ServerError | null = null;\n  token: string | null = window.localStorage.getItem('jwt');\n  appLoaded = false;\n\n  constructor() {\n    makeAutoObservable(this);\n\n    // react to the value changing for logged in\n    // this runs when there is a change to this.token or when it initially loads\n    reaction(\n      () => this.token,\n      (token) => {\n        if (token) {\n          window.localStorage.setItem('jwt', token);\n        } else {\n          window.localStorage.removeItem('jwt');\n        }\n      }\n    );\n  }\n\n  setServerError = (error: ServerError) => {\n    this.error = error;\n  };\n\n  setToken = (token: string | null) => {\n    if (token) {\n      this.token = token;\n    }\n  };\n\n  setApploaded = () => {\n    this.appLoaded = true;\n  };\n}\n","//\n// Class that stores the state related to modal\n// So the modals can be accessed from anywhere in the application\n//\n\nimport { makeAutoObservable } from 'mobx';\n\ninterface Modal {\n  open: boolean;\n  body: JSX.Element | null;\n}\n\nexport class ModalStore {\n  modal: Modal = {\n    open: false,\n    body: null,\n  };\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  /**\n   *\n   * @param content is a React component\n   * @returns\n   */\n  openModal = (content: JSX.Element) => {\n    this.modal.open = true;\n    this.modal.body = content;\n  };\n\n  /**\n   *\n   */\n  closeModal = () => {\n    this.modal.open = false;\n    this.modal.body = null;\n  };\n}\n","import {\n  HubConnection,\n  HubConnectionBuilder,\n  LogLevel,\n} from '@microsoft/signalr';\nimport { makeAutoObservable, runInAction } from 'mobx';\nimport { ChatComment } from '../models/comment';\nimport { store } from './store';\n\nexport default class CommentStore {\n  comments: ChatComment[] = [];\n\n  hubConnection: HubConnection | null = null;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  createHubConnection = (activityId: string) => {\n    // make sure there is selected activity in activity store\n    if (store.activityStore.selectedActivity) {\n      // create the connection\n      this.hubConnection = new HubConnectionBuilder()\n        .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n          accessTokenFactory: () => store.userStore.user!.token,\n        })\n        .withAutomaticReconnect()\n        .configureLogging(LogLevel.Information)\n        .build();\n\n      // start connection\n      this.hubConnection\n        .start()\n        .catch((error) =>\n          console.log('Error establishing the connection: ' + error)\n        );\n\n      // call the method in our API\n      this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n        // update the observable\n        runInAction(() => {\n          // format the date string to JavaScript Date Object\n          // append Z to make it UTC Time\n          comments.forEach((comment) => {\n            comment.createdAt = new Date(comment.createdAt + 'Z');\n          });\n          this.comments = comments;\n        });\n      });\n\n      // on a new comment is receives\n      this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n        // add the comment to the state\n        runInAction(() => {\n          // format the date string to JavaScript Date Object\n          comment.createdAt = new Date(comment.createdAt);\n\n          this.comments.unshift(comment);\n        });\n      });\n    }\n  };\n\n  stopHubConnection = () => {\n    this.hubConnection\n      ?.stop()\n      .catch((error) => console.log('Error stopping connection: ' + error));\n  };\n\n  clearComments = () => {\n    this.comments = [];\n    this.stopHubConnection();\n  };\n\n  addComments = async (values: any) => {\n    values.activityId = store.activityStore.selectedActivity?.id;\n\n    try {\n      // invoke a method in the server\n      await this.hubConnection?.invoke('SendComment', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\n","import { observer } from 'mobx-react-lite';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nfunction ActivityFilters() {\n  const {\n    activityStore: { predicate, setPredicate },\n  } = useStore();\n\n  return (\n    <>\n      <Menu vertical size=\"large\" style={{ width: '100%', marginTop: 25 }}>\n        <Header icon=\"filter\" attached color=\"teal\" content=\"Filters\" />\n        <Menu.Item\n          active={predicate.has('all')}\n          onClick={() => setPredicate('all', 'true')}\n          content=\"All Activities\"\n        />\n        <Menu.Item\n          content=\"I'm going\"\n          active={predicate.has('isGoing')}\n          onClick={() => setPredicate('isGoing', 'true')}\n        />\n        <Menu.Item\n          content=\"I'm hosting\"\n          active={predicate.has('isHost')}\n          onClick={() => setPredicate('isHost', 'true')}\n        />\n      </Menu>\n      <Header />\n      <Calendar\n        onChange={(date) => setPredicate('startDate', date as Date)}\n        value={predicate.get('startDate') || new Date()}\n      />\n    </>\n  );\n}\n\nexport default observer(ActivityFilters);\n","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Reveal, Button } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n  profile: Profile;\n}\n\nfunction FollowButton({ profile }: Props) {\n  const { profileStore, userStore } = useStore();\n\n  const { updateFollowing, loading } = profileStore;\n\n  if (userStore.user?.username === profile.username) return null;\n\n  function handleFollow(e: SyntheticEvent, username: string) {\n    e.preventDefault();\n    profile.following\n      ? updateFollowing(username, false) // unfollow the user\n      : updateFollowing(username, true); // follow the user\n  }\n\n  return (\n    <Reveal animated=\"move\">\n      <Reveal.Content visible style={{ width: '100%' }}>\n        <Button\n          fluid\n          color=\"teal\"\n          content={profile.following ? 'Following' : 'Not Following'}\n        />\n      </Reveal.Content>\n      <Reveal.Content hidden style={{ width: '100%' }}>\n        <Button\n          fluid\n          basic\n          color={profile.following ? 'red' : 'green'}\n          content={profile.following ? 'Unfollow' : 'Follow'}\n          loading={loading}\n          onClick={(e) => handleFollow(e, profile.username)}\n        />\n      </Reveal.Content>\n    </Reveal>\n  );\n}\n\nexport default observer(FollowButton);\n","import { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { Card, Image, Icon } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n  profile: Profile;\n}\n\nfunction ProfileCard({ profile }: Props) {\n  return (\n    <Card as={Link} to={`/profiles/${profile.username}`}>\n      <Image src={profile.image || '/assets/user.png'} />\n      <Card.Content>\n        <Card.Header>{profile.displayName}</Card.Header>\n\n        <Card.Description>{profile.bio}</Card.Description>\n\n        <Card.Content extra>\n          <Icon name=\"user\" />\n          {profile.followerCount}{' '}\n          {profile.followerCount > 1 ? 'followers' : 'follower'}\n        </Card.Content>\n      </Card.Content>\n\n      <FollowButton profile={profile} />\n    </Card>\n  );\n}\n\nexport default observer(ProfileCard);\n","import { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { List, Image, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n  attendees: Profile[];\n}\n\nfunction ActivityListItemAttendee({ attendees }: Props) {\n  const styles = {\n    borderColor: 'orange',\n    borderWidth: 2,\n  };\n\n  return (\n    <List horizontal>\n      {attendees.map((attendee) => (\n        <>\n          <Popup\n            hoverable\n            key={attendee.username}\n            trigger={\n              <List.Item\n                key={attendee.username}\n                as={Link}\n                to={`/profiles/${attendee.username}`}\n              >\n                <Image\n                  size=\"mini\"\n                  circular\n                  bordered\n                  style={attendee.following ? styles : null}\n                  src={attendee.image || '/assets/user.png'}\n                />\n              </List.Item>\n            }\n          >\n            <Popup.Content>\n              <ProfileCard profile={attendee} />\n            </Popup.Content>\n          </Popup>\n        </>\n      ))}\n    </List>\n  );\n}\n\nexport default observer(ActivityListItemAttendee);\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { Item, Button, Segment, Icon, Label } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props {\n  activity: Activity;\n}\n\nfunction ActivityListItem({ activity }: Props) {\n  return (\n    <Segment.Group>\n      <Segment>\n        {activity.isCancelled && (\n          <Label\n            attached=\"top\"\n            color=\"red\"\n            content=\"Cancelled\"\n            style={{ textAlign: 'center' }}\n          />\n        )}\n        <Item.Group>\n          <Item>\n            <Item.Image\n              style={{ marginBottom: 3 }}\n              size=\"tiny\"\n              circular\n              src={activity.host?.image || '/assets/user.png'}\n            />\n            <Item.Content>\n              <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                {activity.title}\n              </Item.Header>\n              <Item.Description>\n                Hosted by{' '}\n                <Link to={`/profiles/${activity.host?.username}`}>\n                  {activity.host?.displayName}\n                </Link>\n              </Item.Description>\n\n              {activity.isHost && (\n                <Item.Description>\n                  <Label basic color=\"orange\">\n                    You are hosting this activity\n                  </Label>\n                </Item.Description>\n              )}\n\n              {activity.isGoing && !activity.isHost && (\n                <Item.Description>\n                  <Label basic color=\"teal\">\n                    You are going to this activity\n                  </Label>\n                </Item.Description>\n              )}\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      </Segment>\n      <Segment>\n        <span>\n          <Icon name=\"clock\" /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n          <Icon name=\"marker\" /> {activity.venue}\n        </span>\n      </Segment>\n      <Segment secondary>\n        <ActivityListItemAttendee attendees={activity.attendees!} />\n      </Segment>\n      <Segment clearing>\n        <span>{activity.description}</span>\n        <Button\n          as={Link}\n          to={`/activities/${activity.id}`}\n          color=\"teal\"\n          floated=\"right\"\n          content=\"View\"\n        />\n      </Segment>\n    </Segment.Group>\n  );\n}\n\nexport default observer(ActivityListItem);\n","import { observer } from 'mobx-react-lite';\nimport { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nfunction ActivityList() {\n  const { activityStore } = useStore();\n  const { groupedActivities } = activityStore;\n\n  return (\n    <>\n      {/* key is the date of the activities we use as a key, key of the object\n          we are grabbing each key value pair\n      */}\n      {groupedActivities.map(([group, activities]) => (\n        <Fragment key={group}>\n          <Header sub color=\"teal\">\n            {group}\n          </Header>\n\n          {activities.map((activity) => (\n            <ActivityListItem key={activity.id} activity={activity} />\n          ))}\n        </Fragment>\n      ))}\n    </>\n  );\n}\n\nexport default observer(ActivityList);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nfunction ActivityListItemPlaceholder() {\n  return (\n    <Fragment>\n      <Placeholder fluid style={{ marginTop: 25 }}>\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color=\"blue\" floated=\"right\" content=\"View\" />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n}\n\nexport default ActivityListItemPlaceholder;\n","import { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid, List, Loader } from 'semantic-ui-react';\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityList from './ActivityList';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\n\nfunction ActivityDashboard() {\n  const { activityStore } = useStore();\n  const { loadActivities, activityRegistry, pagination, setPagingParams } =\n    activityStore;\n\n  const [loadingNext, setLoadingNext] = useState<boolean>(false);\n\n  function handleGetNext() {\n    setLoadingNext(true);\n    setPagingParams(new PagingParams(pagination!.currentPage + 1));\n    loadActivities().then(() => setLoadingNext(false));\n  }\n\n  useEffect(() => {\n    if (activityRegistry.size <= 1) loadActivities();\n  }, [loadActivities, activityRegistry.size]);\n\n  return (\n    <Grid>\n      <Grid.Column width=\"10\">\n        {activityStore.loadingInitial && !loadingNext ? (\n          <>\n            <ActivityListItemPlaceholder />\n            <ActivityListItemPlaceholder />\n          </>\n        ) : (\n          <List>\n            <InfiniteScroll\n              pageStart={0}\n              loadMore={handleGetNext}\n              hasMore={\n                !loadingNext &&\n                !!pagination &&\n                pagination.currentPage < pagination.totalPages\n              }\n              initialLoad={false}\n            >\n              <ActivityList />\n            </InfiniteScroll>\n          </List>\n        )}\n      </Grid.Column>\n\n      <Grid.Column width=\"6\">\n        <ActivityFilters />\n      </Grid.Column>\n\n      <Grid.Column width=\"10\">\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default observer(ActivityDashboard);\n","import { observer } from 'mobx-react-lite';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nfunction NavBar() {\n  const { userStore } = useStore();\n  const { logout, user, isLoggedIn } = userStore;\n\n  return (\n    <Menu inverted fixed=\"top\">\n      <Container>\n        <Menu.Item as={NavLink} exact to=\"/\" header>\n          <img\n            src=\"/assets/logo.png\"\n            alt=\"logo\"\n            style={{ marginRight: '10px' }}\n          />\n          Reactivities\n        </Menu.Item>\n\n        {isLoggedIn && (\n          <>\n            <Menu.Item as={NavLink} exact to=\"/activities\" name=\"Activities\" />\n            <Menu.Item as={NavLink} exact to=\"/errors\" name=\"Errors\" />\n            <Menu.Item>\n              <Button\n                as={NavLink}\n                exact\n                to=\"/createActivity\"\n                positive\n                content=\"Create Activity\"\n              />\n            </Menu.Item>\n\n            <Menu.Item position=\"right\">\n              <Image\n                src={user?.image || 'assets/user.png'}\n                avatar\n                spaced=\"right\"\n              />\n              <Dropdown pointing=\"top left\" text={user?.displayName}>\n                <Dropdown.Menu>\n                  <Dropdown.Item\n                    as={Link}\n                    to={`/profiles/${user?.username}`}\n                    text=\"My Profile\"\n                    icon=\"user\"\n                  />\n\n                  <Dropdown.Item onClick={logout} text=\"Logout\" icon=\"power\" />\n                </Dropdown.Menu>\n              </Dropdown>\n            </Menu.Item>\n          </>\n        )}\n      </Container>\n    </Menu>\n  );\n}\n\nexport default observer(NavBar);\n","import { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n  placeholder: string;\n  name: string;\n  label?: string;\n  type?: string;\n}\n\nfunction MyTextInput(props: Props) {\n  const [field, meta] = useField(props.name);\n\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <label>{props.label}</label>\n\n      <input {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <Label basic color=\"red\">\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n}\n\nexport default MyTextInput;\n","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nfunction LoginForm() {\n  const { userStore } = useStore();\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '', error: '' }}\n      onSubmit={(values, { setErrors }) =>\n        userStore\n          .login(values)\n          .catch((error) => setErrors({ error: error.response.data }))\n      }\n    >\n      {({ handleSubmit, isSubmitting, errors }) => (\n        <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\n          <Header\n            as=\"h2\"\n            content=\"Login to Reactivites\"\n            color=\"teal\"\n            textAlign=\"center\"\n          />\n          <MyTextInput name=\"email\" placeholder=\"Email\" />\n          <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\n          <ErrorMessage\n            name=\"error\"\n            render={() => (\n              <Label\n                style={{ marginBottom: 10 }}\n                basic\n                color=\"red\"\n                content={errors.error}\n              />\n            )}\n          />\n          <Button\n            loading={isSubmitting}\n            positive\n            content=\"Login\"\n            type=\"submit\"\n            fluid\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default observer(LoginForm);\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n  errors: any;\n}\n\nfunction ValidationErrors({ errors }: Props) {\n  return (\n    <Message error>\n      {errors && (\n        <Message.List>\n          {errors.map((error: any, i: any) => (\n            <Message.Item key={i}>{error}</Message.Item>\n          ))}\n        </Message.List>\n      )}\n    </Message>\n  );\n}\n\nexport default ValidationErrors;\n","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nfunction RegisterForm() {\n  const { userStore } = useStore();\n\n  return (\n    <Formik\n      initialValues={{\n        displayName: '',\n        username: '',\n        email: '',\n        password: '',\n        error: '',\n      }}\n      onSubmit={(values, { setErrors }) =>\n        userStore.register(values).catch((error) => setErrors({ error: error }))\n      }\n      validationSchema={Yup.object({\n        displayName: Yup.string().required(),\n        username: Yup.string().required(),\n        email: Yup.string().required().email(),\n        password: Yup.string().required(),\n      })}\n    >\n      {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\n        <Form\n          className=\"ui form error\"\n          onSubmit={handleSubmit}\n          autoComplete=\"off\"\n        >\n          <Header\n            as=\"h2\"\n            content=\"Sign up to Reactivites\"\n            color=\"teal\"\n            textAlign=\"center\"\n          />\n          <MyTextInput name=\"displayName\" placeholder=\"Display Name\" />\n          <MyTextInput name=\"username\" placeholder=\"Username\" />\n          <MyTextInput name=\"email\" placeholder=\"Email\" />\n          <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\n          <ErrorMessage\n            name=\"error\"\n            render={() => <ValidationErrors errors={errors.error} />}\n          />\n\n          <Button\n            disabled={!isValid || !dirty || isSubmitting}\n            loading={isSubmitting}\n            positive\n            content=\"Register\"\n            type=\"submit\"\n            fluid\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default observer(RegisterForm);\n","import { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport {\n  Container,\n  Header,\n  Segment,\n  Image,\n  Button,\n  Divider,\n} from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nfunction HomePage() {\n  const { userStore, modalStore } = useStore();\n\n  return (\n    <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\n      <Container text>\n        <Header as=\"h1\" inverted>\n          <Image\n            size=\"massive\"\n            src=\"/assets/logo.png\"\n            alt=\"logo\"\n            style={{ marginBottom: 12 }}\n          />\n          Reactivities\n        </Header>\n\n        {userStore.isLoggedIn ? (\n          <>\n            <Header as=\"h2\" inverted content=\"Welcome to Reactivities\" />\n            <Button as={Link} to=\"/activities\" size=\"huge\" inverted>\n              Go to Activities!\n            </Button>\n          </>\n        ) : (\n          <>\n            <Button\n              onClick={() => modalStore.openModal(<LoginForm />)}\n              size=\"huge\"\n              inverted\n            >\n              Login\n            </Button>\n\n            <Button\n              onClick={() => modalStore.openModal(<RegisterForm />)}\n              size=\"huge\"\n              inverted\n            >\n              Register\n            </Button>\n\n            <Divider horizontal inverted>\n              Or\n            </Divider>\n            <Button\n              loading={userStore.fbLoading}\n              disabled={userStore.fbLoading}\n              size=\"huge\"\n              inverted\n              color=\"facebook\"\n              content=\"Login with Facebook\"\n              onClick={userStore.facebookLogin}\n            />\n          </>\n        )}\n      </Container>\n    </Segment>\n  );\n}\n\nexport default observer(HomePage);\n","import { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n  inverted?: boolean;\n  content: string;\n}\n\nexport default function LoadingComponent({\n  inverted = true,\n  content = 'Loading...',\n}: Props) {\n  return (\n    <Dimmer active={true} inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n}\n","import { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\n\n// use Partial<T> to make all the props optional\nfunction DateInput(props: Partial<ReactDatePickerProps>) {\n  const [field, meta, helpers] = useField(props.name!);\n\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <DatePicker\n        {...field}\n        {...props}\n        // overriding the props as we specify individually\n        selected={(field.value && new Date(field.value)) || null}\n        onChange={(value) => helpers.setValue(value)}\n      />\n\n      {meta.touched && meta.error ? (\n        <Label basic color=\"red\">\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n}\n\nexport default DateInput;\n","import { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n  placeholder: string;\n  name: string;\n  rows: number;\n  label?: string;\n}\n\nfunction MyTextArea(props: Props) {\n  const [field, meta] = useField(props.name);\n\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <label>{props.label}</label>\n\n      <textarea {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <Label basic color=\"red\">\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n}\n\nexport default MyTextArea;\n","import { useField } from 'formik';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n  placeholder: string;\n  name: string;\n  options: any;\n  label?: string;\n}\n\nfunction MySelectInput(props: Props) {\n  // helpers allows us to manually set a value\n  // and manually set the touched status of the input component\n  const [field, meta, helpers] = useField(props.name);\n\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <label>{props.label}</label>\n\n      <Select\n        clearable\n        options={props.options}\n        value={field.value || null}\n        onChange={(e, data) => helpers.setValue(data.value)}\n        onBlur={() => helpers.setTouched(true)}\n        placeholder={props.placeholder}\n      />\n\n      {meta.touched && meta.error ? (\n        <Label basic color=\"red\">\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n}\n\nexport default MySelectInput;\n","export const categoryOptions = [\n  { text: 'Drinks', value: 'drinks' },\n  { text: 'Culture', value: 'culture' },\n  { text: 'Film', value: 'film' },\n  { text: 'Food', value: 'food' },\n  { text: 'Music', value: 'music' },\n  { text: 'Travel', value: 'travel' },\n];\n","import { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport { ActivityFormValues } from '../../../app/models/activity';\n\nfunction ActivityForm() {\n  const { activityStore } = useStore();\n  const { createActivity, updateActivity, loadActivity, loadingInitial } =\n    activityStore;\n\n  // to push the user to a page\n  const history = useHistory();\n\n  // get the id from the router params\n  const { id } = useParams<{ id: string }>();\n\n  const [activity, setActivity] = useState<ActivityFormValues>(\n    new ActivityFormValues()\n  );\n\n  useEffect(() => {\n    if (id)\n      loadActivity(id).then((activity) => {\n        setActivity(new ActivityFormValues(activity));\n      });\n  }, [id, loadActivity]);\n\n  function handleFormSubmit(activity: ActivityFormValues) {\n    if (!activity.id) {\n      let newActivity = { ...activity, id: uuid() };\n      createActivity(newActivity).then(() => {\n        history.push(`/activities/${newActivity.id}`);\n      });\n    } else {\n      updateActivity(activity).then(() => {\n        history.push(`/activities/${activity.id}`);\n      });\n    }\n  }\n\n  const validationSchema = Yup.object({\n    title: Yup.string().required('The activity title is required'),\n    description: Yup.string().required('The activity description is required'),\n    category: Yup.string().required(),\n    date: Yup.string().required('Date is required').nullable(),\n    venue: Yup.string().required(),\n    city: Yup.string().required(),\n  });\n\n  if (loadingInitial && id) {\n    return <LoadingComponent content=\"Loading...\" />;\n  }\n\n  return (\n    <Segment clearing>\n      <Header content=\"Activity Details\" sub color=\"teal\" />\n      <Formik\n        enableReinitialize\n        validationSchema={validationSchema}\n        initialValues={activity}\n        onSubmit={(values) => handleFormSubmit(values)}\n      >\n        {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n          <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\n            <MyTextInput name=\"title\" placeholder=\"Title\" />\n\n            <MyTextArea rows={3} placeholder=\"Description\" name=\"description\" />\n            <MySelectInput\n              options={categoryOptions}\n              placeholder=\"Category\"\n              name=\"category\"\n            />\n            <MyDateInput\n              placeholderText=\"Date\"\n              name=\"date\"\n              showTimeSelect\n              timeCaption=\"time\"\n              dateFormat=\"MMMM d, yyyy h:mm aa\"\n            />\n\n            <Header content=\"Location Details\" sub color=\"teal\" />\n\n            <MyTextInput placeholder=\"City\" name=\"city\" />\n            <MyTextInput placeholder=\"Venue\" name=\"venue\" />\n\n            <Button\n              loading={isSubmitting}\n              floated=\"right\"\n              positive\n              disabled={isSubmitting || !dirty || !isValid}\n              type=\"submit\"\n              content=\"Submit\"\n            />\n            <Button\n              as={Link}\n              to=\"/activities\"\n              floated=\"right\"\n              type=\"button\"\n              content=\"Cancel\"\n            />\n          </Form>\n        )}\n      </Formik>\n    </Segment>\n  );\n}\n\nexport default observer(ActivityForm);\n","import { Formik, Form, Field, FieldProps } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface Props {\n  activityId: string;\n}\n\nfunction ActivityDetailedChat({ activityId }: Props) {\n  const { commentStore } = useStore();\n\n  useEffect(() => {\n    if (activityId) {\n      commentStore.createHubConnection(activityId);\n    }\n    return () => {\n      commentStore.clearComments();\n    };\n  }, [commentStore, activityId]);\n\n  return (\n    <>\n      <Segment\n        textAlign=\"center\"\n        attached=\"top\"\n        inverted\n        color=\"teal\"\n        style={{ border: 'none' }}\n      >\n        <Header>Chat about this event</Header>\n      </Segment>\n      <Segment attached clearing>\n        <Comment.Group>\n          <Formik\n            onSubmit={(values, { resetForm }) =>\n              commentStore.addComments(values).then(() => resetForm())\n            }\n            initialValues={{ body: '' }}\n            validationSchema={Yup.object({\n              body: Yup.string().required(),\n            })}\n          >\n            {({ isSubmitting, isValid, dirty, handleSubmit }) => (\n              <Form className=\"ui form\">\n                <Field name=\"body\">\n                  {(props: FieldProps) => (\n                    <div style={{ position: 'relative' }}>\n                      <Loader active={isSubmitting} />\n                      <textarea\n                        placeholder=\"Enter your comment (Enter to submit, SHIFT + Enter for a new line)\"\n                        rows={2}\n                        {...props.field}\n                        onKeyPress={(e) => {\n                          if (e.key === 'Enter' && e.shiftKey) {\n                            return;\n                          }\n                          if (e.key === 'Enter' && !e.shiftKey) {\n                            e.preventDefault();\n                            isValid && handleSubmit();\n                          }\n                        }}\n                      />\n                    </div>\n                  )}\n                </Field>\n              </Form>\n            )}\n          </Formik>\n          {commentStore.comments.map((comment) => (\n            <Comment key={comment.id}>\n              <Comment.Avatar src={comment.image || '/assets/user.png'} />\n              <Comment.Content>\n                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                  {comment.displayName}\n                </Comment.Author>\n                <Comment.Metadata>\n                  <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                </Comment.Metadata>\n                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>\n                  {comment.body}\n                </Comment.Text>\n              </Comment.Content>\n            </Comment>\n          ))}\n        </Comment.Group>\n      </Segment>\n    </>\n  );\n}\n\nexport default observer(ActivityDetailedChat);\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n  filter: 'brightness(30%)',\n};\n\nconst activityImageTextStyle = {\n  position: 'absolute',\n  bottom: '5%',\n  left: '5%',\n  width: '100%',\n  height: 'auto',\n  color: 'white',\n};\n\ninterface Props {\n  activity: Activity;\n}\n\nfunction ActivityDetailedHeader({ activity }: Props) {\n  const {\n    activityStore: { cancelActivityToggle, updateAttendence, loading },\n  } = useStore();\n\n  return (\n    <Segment.Group>\n      <Segment basic attached=\"top\" style={{ padding: '0' }}>\n        {activity.isCancelled && (\n          <Label\n            style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\n            ribbon\n            color=\"red\"\n            content=\"Cancelled\"\n          />\n        )}\n\n        <Image\n          src={`/assets/categoryImages/${activity.category}.jpg`}\n          fluid\n          style={activityImageStyle}\n        />\n        <Segment style={activityImageTextStyle} basic>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <Header\n                  size=\"huge\"\n                  content={activity.title}\n                  style={{ color: 'white' }}\n                />\n                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                <p>\n                  Hosted by{' '}\n                  <strong>\n                    <Link to={`/profiles/${activity.hostUsername}`}>\n                      {activity.host?.displayName}\n                    </Link>\n                  </strong>\n                </p>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n      <Segment clearing attached=\"bottom\">\n        {activity.isHost ? (\n          <>\n            <Button\n              onClick={cancelActivityToggle}\n              loading={loading}\n              disabled={loading}\n              color={activity.isCancelled ? 'green' : 'red'}\n              floated=\"left\"\n              basic\n            >\n              {activity.isCancelled\n                ? 'Re-activate Activity'\n                : 'Cancel Activity'}\n            </Button>\n            <Button\n              disabled={activity.isCancelled}\n              as={Link}\n              to={`/manage/${activity.id}`}\n              color=\"orange\"\n              floated=\"right\"\n            >\n              Manage Event\n            </Button>\n          </>\n        ) : activity.isGoing ? (\n          <Button\n            disabled={loading}\n            loading={loading}\n            onClick={updateAttendence}\n          >\n            Cancel attendance\n          </Button>\n        ) : (\n          <Button\n            disabled={loading || activity.isCancelled}\n            loading={loading}\n            onClick={updateAttendence}\n            color=\"teal\"\n          >\n            Join Activity\n          </Button>\n        )}\n      </Segment>\n    </Segment.Group>\n  );\n}\n\nexport default observer(ActivityDetailedHeader);\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\n\ninterface Props {\n  activity: Activity;\n}\n\nfunction ActivityDetailedInfo({ activity }: Props) {\n  return (\n    <Segment.Group>\n      <Segment attached=\"top\">\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size=\"large\" color=\"teal\" name=\"info\" />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>{activity.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign=\"middle\">\n          <Grid.Column width={1}>\n            <Icon name=\"calendar\" size=\"large\" color=\"teal\" />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <span>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign=\"middle\">\n          <Grid.Column width={1}>\n            <Icon name=\"marker\" size=\"large\" color=\"teal\" />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {activity.venue}, {activity.city}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n}\n\nexport default observer(ActivityDetailedInfo);\n","import { Segment, List, Label, Item, Image } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { Activity } from '../../../app/models/activity';\n\ninterface Props {\n  activity: Activity;\n}\n\nfunction ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\n  if (!attendees) {\n    return null;\n  }\n\n  return (\n    <>\n      <Segment\n        textAlign=\"center\"\n        style={{ border: 'none' }}\n        attached=\"top\"\n        secondary\n        inverted\n        color=\"teal\"\n      >\n        {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} Going\n      </Segment>\n      <Segment attached>\n        <List relaxed divided>\n          {attendees.map((attendee) => (\n            <Item key={attendee.username} style={{ position: 'relative' }}>\n              {attendee.username === host?.username && (\n                <Label\n                  style={{ position: 'absolute' }}\n                  color=\"orange\"\n                  ribbon=\"right\"\n                >\n                  Host\n                </Label>\n              )}\n\n              <Image size=\"tiny\" src={attendee.image || '/assets/user.png'} />\n              <Item.Content verticalAlign=\"middle\">\n                <Item.Header as=\"h3\">\n                  <Link to={`/profiles/${attendee.username}`}>\n                    {attendee.displayName}\n                  </Link>\n                </Item.Header>\n                {attendee.following && (\n                  <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\n                )}\n              </Item.Content>\n            </Item>\n          ))}\n        </List>\n      </Segment>\n    </>\n  );\n}\n\nexport default observer(ActivityDetailedSidebar);\n","import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\nfunction ActivityDetails() {\n  const { activityStore } = useStore();\n  const {\n    selectedActivity: activity,\n    loadActivity,\n    loadingInitial,\n    clearSelectedActivity,\n  } = activityStore;\n\n  // get the id from hte url\n  const { id } = useParams<{ id: string }>();\n\n  useEffect(() => {\n    if (id) {\n      loadActivity(id);\n    }\n    return () => clearSelectedActivity();\n  }, [id, loadActivity, clearSelectedActivity]);\n\n  if (loadingInitial || !activity)\n    return <LoadingComponent content=\"Loading...\" />;\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <ActivityDetailedHeader activity={activity} />\n        <ActivityDetailedInfo activity={activity} />\n        <ActivityDetailedChat activityId={activity.id} />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <ActivityDetailedSidebar activity={activity} />\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default observer(ActivityDetails);\n","import { Button, Header, Segment } from 'semantic-ui-react';\nimport axios from 'axios';\nimport { useState } from 'react';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n  const baseUrl = process.env.REACT_APP_API_URL;\n\n  const [errors, setErrors] = useState(null);\n\n  function handleNotFound() {\n    axios\n      .get(baseUrl + 'buggy/not-found')\n      .catch((err) => console.log(err.response));\n  }\n\n  function handleBadRequest() {\n    axios\n      .get(baseUrl + 'buggy/bad-request')\n      .catch((err) => console.log(err.response));\n  }\n\n  function handleServerError() {\n    axios\n      .get(baseUrl + 'buggy/server-error')\n      .catch((err) => console.log(err.response));\n  }\n\n  function handleUnauthorised() {\n    axios\n      .get(baseUrl + 'buggy/unauthorised')\n      .catch((err) => console.log(err.response));\n  }\n\n  function handleBadGuid() {\n    axios\n      .get(baseUrl + 'activities/notaguid')\n      .catch((err) => console.log(err.response));\n  }\n\n  function handleValidationError() {\n    axios.post(baseUrl + 'activities', {}).catch((err) => setErrors(err));\n  }\n\n  return (\n    <>\n      <Header as=\"h1\" content=\"Test Error component\" />\n      <Segment>\n        <Button.Group widths=\"7\">\n          <Button onClick={handleNotFound} content=\"Not Found\" basic primary />\n          <Button\n            onClick={handleBadRequest}\n            content=\"Bad Request\"\n            basic\n            primary\n          />\n          <Button\n            onClick={handleValidationError}\n            content=\"Validation Error\"\n            basic\n            primary\n          />\n          <Button\n            onClick={handleServerError}\n            content=\"Server Error\"\n            basic\n            primary\n          />\n          <Button\n            onClick={handleUnauthorised}\n            content=\"Unauthorised\"\n            basic\n            primary\n          />\n          <Button onClick={handleBadGuid} content=\"Bad Guid\" basic primary />\n        </Button.Group>\n      </Segment>\n\n      {errors && <ValidationErrors errors={errors} />}\n    </>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nfunction NotFound() {\n  return (\n    <Segment placeholder>\n      <Header icon>\n        <Icon name=\"search\" />\n        Oops - we've looked everywhere and could not find this.\n      </Header>\n      <Segment.Inline>\n        <Button as={Link} to=\"/activities\" primary>\n          Return to activities page\n        </Button>\n      </Segment.Inline>\n    </Segment>\n  );\n}\n\nexport default NotFound;\n","import { observer } from 'mobx-react-lite';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nfunction ServerError() {\n  const { commonStore } = useStore();\n\n  return (\n    <Container>\n      <Header as=\"h1\" content=\"Server Error\" />\n      <Header as=\"h2\" color=\"red\" content={commonStore.error?.message} />\n\n      {commonStore.error?.details && (\n        <Segment>\n          <Header as=\"h4\" content=\"Stack Trace\" color=\"teal\" />\n          <code style={{ marginTop: '10px' }}>{commonStore.error.details}</code>\n        </Segment>\n      )}\n    </Container>\n  );\n}\n\nexport default observer(ServerError);\n","import { observer } from 'mobx-react-lite';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nfunction ModalContainer() {\n  const { modalStore } = useStore();\n\n  return (\n    <Modal\n      open={modalStore.modal.open}\n      onClose={modalStore.closeModal}\n      size=\"mini\"\n    >\n      <Modal.Content>{modalStore.modal.body}</Modal.Content>\n    </Modal>\n  );\n}\n\nexport default observer(ModalContainer);\n","import { observer } from 'mobx-react-lite';\nimport {\n  Segment,\n  Grid,\n  Item,\n  Header,\n  Statistic,\n  Divider,\n  Reveal,\n  Button,\n} from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n  profile: Profile;\n}\n\nfunction ProfileHeader({ profile }: Props) {\n  return (\n    <Segment>\n      <Grid>\n        <Grid.Column width={12}>\n          <Item.Group>\n            <Item>\n              <Item.Image\n                avatar\n                size=\"small\"\n                src={profile.image || `/assets/user.png`}\n              />\n              <Item.Content verticalAlign=\"middle\">\n                <Header as=\"h1\" content={profile.displayName} />\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Grid.Column>\n        <Grid.Column width={4}>\n          <Statistic.Group widths={2}>\n            <Statistic label=\"Followers\" value={profile.followerCount} />\n            <Statistic label=\"Following\" value={profile.followingCount} />\n          </Statistic.Group>\n          <Divider />\n          <FollowButton profile={profile} />\n        </Grid.Column>\n      </Grid>\n    </Segment>\n  );\n}\n\nexport default observer(ProfileHeader);\n","import { Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport MyTextArea from '../../app/common/form/MyTextArea';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { Button } from 'semantic-ui-react';\n\ninterface Props {\n  setEditMode: (editMode: boolean) => void;\n}\n\nfunction ProfileEdit({ setEditMode }: Props) {\n  const {\n    profileStore: { profile, updateProfile },\n  } = useStore();\n\n  return (\n    <Formik\n      initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\n      onSubmit={(values) => {\n        updateProfile(values).then(() => {\n          setEditMode(false);\n        });\n      }}\n      validationSchema={Yup.object({\n        displayName: Yup.string().required(),\n      })}\n    >\n      {({ isSubmitting, isValid, dirty }) => (\n        <Form className=\"ui form\">\n          <MyTextInput placeholder=\"Display name\" name=\"displayName\" />\n          <MyTextArea rows={3} placeholder=\"Add your bio\" name=\"bio\" />\n\n          <Button\n            positive\n            type=\"submit\"\n            loading={isSubmitting}\n            content=\"Update Profile\"\n            floated=\"right\"\n            disabled={!isValid || !dirty}\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default observer(ProfileEdit);\n","import { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileEdit from './ProfileEdit';\n\nfunction ProfileAbout() {\n  const { profileStore } = useStore();\n  const { isCurrentUser, profile } = profileStore;\n  const [editMode, setEditMode] = useState(false);\n\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated=\"left\"\n            icon=\"user\"\n            content={`About ${profile?.username}`}\n          />\n\n          {isCurrentUser && (\n            <Button\n              floated=\"right\"\n              basic\n              content={editMode ? 'Cancel' : 'Edit Profile'}\n              onClick={() => setEditMode(!editMode)}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {editMode ? (\n            <ProfileEdit setEditMode={setEditMode} />\n          ) : (\n            <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n}\n\nexport default observer(ProfileAbout);\n","import React, { SyntheticEvent, useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { UserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { useStore } from '../../app/stores/store';\n\nconst panes = [\n  { menuItem: 'Future Events', pane: { key: 'future' } },\n  { menuItem: 'Past Events', pane: { key: 'past' } },\n  { menuItem: 'Hosting', pane: { key: 'hosting' } },\n];\n\nfunction ProfileActivities() {\n  const { profileStore } = useStore();\n  const { loadUserActivities, profile, loadingActivities, userActivities } =\n    profileStore;\n\n  useEffect(() => {\n    loadUserActivities(profile!.username);\n  }, [loadUserActivities, profile]);\n\n  const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n    loadUserActivities(\n      profile!.username,\n      panes[data.activeIndex as number].pane.key\n    );\n  };\n\n  return (\n    <Tab.Pane loading={loadingActivities}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated=\"left\" icon=\"calendar\" content={'Activities'} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4}>\n            {userActivities.map((activity: UserActivity) => (\n              <Card\n                as={Link}\n                to={`/activities/${activity.activityId}`}\n                key={activity.activityId}\n              >\n                <Image\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\n                  style={{ minHeight: 100, objectFit: 'cover' }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign=\"center\">{activity.title}</Card.Header>\n                  <Card.Meta textAlign=\"center\">\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n}\n\nexport default observer(ProfileActivities);\n","import { observer } from 'mobx-react-lite';\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nfunction ProfileFollowings() {\n  const {\n    profileStore: { profile, followings, loadingFollowings, activeTab },\n  } = useStore();\n\n  return (\n    <Tab.Pane loading={loadingFollowings}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated=\"left\"\n            icon=\"user\"\n            content={\n              activeTab === 3\n                ? `People following ${profile?.displayName}`\n                : `People ${profile?.displayName} is following`\n            }\n          />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Card.Group itemsPerRow={4}>\n            {followings.map((profile) => (\n              <ProfileCard key={profile.username} profile={profile} />\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n}\n\nexport default observer(ProfileFollowings);\n","import { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Header, Icon } from 'semantic-ui-react';\n\ninterface Props {\n  setFiles: (files: any) => void;\n}\n\nfunction PhotoWidgetDropzone({ setFiles }: Props) {\n  const dzStyles = {\n    border: 'dashed 3px #eee',\n    borderColor: '#eee',\n    borderRadius: '5px',\n    paddingTop: '30px',\n    textAlign: 'center' as 'center',\n    height: 200,\n  };\n\n  const dzActive = {\n    borderColor: 'green',\n  };\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      // Get a preview of hte file\n      setFiles(\n        acceptedFiles.map((file: any) =>\n          Object.assign(file, {\n            preview: URL.createObjectURL(file),\n          })\n        )\n      );\n    },\n    [setFiles]\n  );\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div\n      {...getRootProps()}\n      style={isDragActive ? { ...dzStyles, ...dzActive } : { ...dzStyles }}\n    >\n      <input {...getInputProps()} />\n\n      <Icon name=\"upload\" size=\"huge\" />\n      <Header content=\"Drop image here\" />\n    </div>\n  );\n}\n\nexport default PhotoWidgetDropzone;\n","import { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n  imagePreview: string;\n  setCropper: (cropper: Cropper) => void;\n}\n\nfunction PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\n  return (\n    <Cropper\n      src={imagePreview}\n      style={{ height: 200, width: '100%' }}\n      initialAspectRatio={1}\n      aspectRatio={1}\n      preview=\".img-preview\"\n      guides={false}\n      viewMode={1}\n      autoCropArea={1}\n      background={false}\n      onInitialized={(cropper) => setCropper(cropper)}\n    />\n  );\n}\n\nexport default PhotoWidgetCropper;\n","import { useEffect, useState } from 'react';\nimport { Grid, Header, Button } from 'semantic-ui-react';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\n\ninterface Props {\n  loading: boolean;\n  uploadPhoto: (file: Blob) => void;\n}\n\nfunction PhotoUploadWidget({ loading, uploadPhoto }: Props) {\n  const [files, setFiles] = useState<any>([]);\n\n  const [cropper, setCropper] = useState<Cropper>();\n\n  function onCrop() {\n    if (cropper) {\n      cropper.getCroppedCanvas().toBlob((blob) => uploadPhoto(blob!));\n    }\n  }\n\n  // clean up the component after it is used of\n  useEffect(() => {\n    return () => {\n      files.forEach((file: any) => URL.revokeObjectURL(file.preview));\n    };\n  }, [files]);\n\n  return (\n    <Grid>\n      <Grid.Column width={4}>\n        <Header sub color=\"teal\" content=\"Step 1 - Add Photo\" />\n        <PhotoWidgetDropzone setFiles={setFiles} />\n      </Grid.Column>\n      <Grid.Column width={1} />\n      <Grid.Column width={4}>\n        <Header sub color=\"teal\" content=\"Step 2 - Resize Image\" />\n        {files && files.length > 0 && (\n          <PhotoWidgetCropper\n            setCropper={setCropper}\n            imagePreview={files[0].preview}\n          />\n        )}\n      </Grid.Column>\n      <Grid.Column width={1} />\n      <Grid.Column width={4}>\n        <Header sub color=\"teal\" content=\"Step 3 - Preview and Upload\" />\n\n        {files && files.length > 0 && (\n          <>\n            <div\n              className=\"img-preview\"\n              style={{ minHeight: 200, overflow: 'hidden' }}\n            />\n            <Button.Group widths={2}>\n              <Button\n                disabled={loading}\n                loading={loading}\n                onClick={onCrop}\n                positive\n                icon=\"check\"\n              />\n              <Button\n                disabled={loading}\n                onClick={() => setFiles([])}\n                icon=\"close\"\n              />\n            </Button.Group>\n          </>\n        )}\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default PhotoUploadWidget;\n","import { observer } from 'mobx-react-lite';\nimport { SyntheticEvent, useState } from 'react';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n  profile: Profile;\n}\n\nfunction ProfilePhotos({ profile }: Props) {\n  const {\n    profileStore: {\n      isCurrentUser,\n      uploadPhoto,\n      uploading,\n      loading,\n      setMainPhoto,\n      deletePhoto,\n    },\n  } = useStore();\n\n  const [addPhotoMode, setAddPhotoMode] = useState<boolean>(false);\n\n  const [target, setTarget] = useState('');\n\n  const handleSetAddPhotoMode = () => {\n    setAddPhotoMode(!addPhotoMode);\n  };\n\n  function handlePhotoUpload(file: Blob) {\n    uploadPhoto(file).then(() => setAddPhotoMode(false));\n  }\n\n  function handleSetMainPhoto(\n    photo: Photo,\n    e: SyntheticEvent<HTMLButtonElement>\n  ) {\n    setTarget(e.currentTarget.name);\n    setMainPhoto(photo);\n  }\n\n  function handleDeletePhoto(\n    photo: Photo,\n    e: SyntheticEvent<HTMLButtonElement>\n  ) {\n    setTarget(e.currentTarget.name);\n    deletePhoto(photo);\n  }\n\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\n\n          {isCurrentUser && (\n            <Button\n              onClick={handleSetAddPhotoMode}\n              floated=\"right\"\n              basic\n              content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {addPhotoMode ? (\n            <PhotoUploadWidget\n              uploadPhoto={handlePhotoUpload}\n              loading={uploading}\n            />\n          ) : (\n            <Card.Group itemsPerRow={5}>\n              {profile.photos?.map((photo) => (\n                <Card key={photo.id}>\n                  <Image src={photo.url} />\n\n                  {isCurrentUser && (\n                    <Button.Group fluid widths={2}>\n                      <Button\n                        basic\n                        color=\"green\"\n                        content=\"Main\"\n                        name={'main' + photo.id}\n                        disabled={photo.isMain || loading}\n                        loading={target === 'main' + photo.id && loading}\n                        onClick={(e) => handleSetMainPhoto(photo, e)}\n                      />\n                      <Button\n                        onClick={(e) => handleDeletePhoto(photo, e)}\n                        loading={target === photo.id && loading}\n                        name={photo.id}\n                        basic\n                        disabled={photo.isMain || loading}\n                        color=\"red\"\n                        icon=\"trash\"\n                      />\n                    </Button.Group>\n                  )}\n                </Card>\n              ))}\n            </Card.Group>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n}\n\nexport default observer(ProfilePhotos);\n","import { observer } from 'mobx-react-lite';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileActivities from './ProfileActivities';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n\ninterface Props {\n  profile: Profile;\n}\n\nfunction ProfileContent({ profile }: Props) {\n  const { profileStore } = useStore();\n\n  const panes = [\n    { menuItem: 'About', render: () => <ProfileAbout /> },\n    { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\n    { menuItem: 'Events', render: () => <ProfileActivities /> },\n    {\n      menuItem: 'Followers',\n      render: () => <ProfileFollowings />,\n    },\n    {\n      menuItem: 'Following',\n      render: () => <ProfileFollowings />,\n    },\n  ];\n\n  return (\n    <Tab\n      menu={{ fluid: true, vertical: true }}\n      menuPosition=\"right\"\n      panes={panes}\n      onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n    />\n  );\n}\n\nexport default observer(ProfileContent);\n","import { Grid } from 'semantic-ui-react';\nimport ProfileHeader from './ProfileHeader';\nimport ProfileContent from './ProfileContent';\nimport { observer } from 'mobx-react-lite';\nimport { useParams } from 'react-router-dom';\nimport { useStore } from '../../app/stores/store';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\nimport { useEffect } from 'react';\n\nfunction ProfilePage() {\n  // grab the username from the url passed in\n  const { username } = useParams<{ username: string }>();\n\n  const { profileStore } = useStore();\n  const { loadProfile, loadingProfile, profile, setActiveTab } = profileStore;\n\n  useEffect(() => {\n    loadProfile(username);\n\n    return () => setActiveTab(0);\n  }, [loadProfile, username]);\n\n  if (loadingProfile) return <LoadingComponent content=\"Loading Profile ...\" />;\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        {profile && (\n          <>\n            <ProfileHeader profile={profile} />\n            <ProfileContent profile={profile} />\n          </>\n        )}\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default observer(ProfilePage);\n","import React from 'react';\nimport {\n  Redirect,\n  Route,\n  RouteComponentProps,\n  RouteProps,\n} from 'react-router-dom';\nimport { useStore } from '../stores/store';\n\ninterface Props extends RouteProps {\n  component:\n    | React.ComponentType<RouteComponentProps<any>>\n    | React.ComponentType<any>;\n}\n\nfunction PrivateRoute({ component: Component, ...rest }: Props) {\n  const {\n    userStore: { isLoggedIn },\n  } = useStore();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isLoggedIn ? <Component {...props} /> : <Redirect to=\"/\" />\n      }\n    />\n  );\n}\n\nexport default PrivateRoute;\n","import { useLocation } from 'react-router-dom';\n\nexport default function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","import { observer } from 'mobx-react-lite';\nimport { toast } from 'react-toastify';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\nimport agent from '../../app/api/agent';\nimport useQuery from '../../app/common/util/hooks';\n\nfunction RegisterSuccess() {\n  // get the email from the query string\n  const email = useQuery().get('email') as string;\n\n  function handleConfirmEmailAddress() {\n    agent.Account.resendEmailConfirm(email)\n      .then(() => {\n        toast.success('Verification email sent - please check your email');\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  return (\n    <Segment placeholder textAlign=\"center\">\n      <Header icon color=\"green\">\n        <Icon name=\"check\" />\n        Successfully registered!\n      </Header>\n\n      <p>\n        Pleace check your email (including junk email) for the verification\n        email\n      </p>\n\n      {email && (\n        <>\n          <p>Didn't receive the email? Click the button below to resend</p>\n          <Button\n            primary\n            onClick={handleConfirmEmailAddress}\n            content=\"Resend email\"\n            size=\"huge\"\n          />\n        </>\n      )}\n    </Segment>\n  );\n}\n\nexport default observer(RegisterSuccess);\n","import { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\nimport agent from '../../app/api/agent';\nimport useQuery from '../../app/common/util/hooks';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from './LoginForm';\n\nfunction ConfirmEmail() {\n  const { modalStore } = useStore();\n\n  const email = useQuery().get('email') as string;\n  const token = useQuery().get('token') as string;\n\n  const Status = {\n    Verifying: 'Verifying',\n    Failed: 'Failed',\n    Success: 'Success',\n  };\n\n  const [status, setStatus] = useState(Status.Verifying);\n\n  function handleConfirmEmailAddress() {\n    agent.Account.resendEmailConfirm(email)\n      .then(() => {\n        toast.success('Verification email sent - please check your email');\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  useEffect(() => {\n    agent.Account.verifyEmail(token, email)\n      .then(() => {\n        setStatus(Status.Success);\n      })\n      .catch(() => {\n        setStatus(Status.Failed);\n      });\n  }, [token, email, Status.Success, Status.Failed]);\n\n  function getBody() {\n    switch (status) {\n      case Status.Verifying:\n        return <p>Verifying...</p>;\n\n      case Status.Failed:\n        return (\n          <div>\n            <p>\n              Verification failed. You can try resending the verify link to your\n              email\n            </p>\n\n            <Button\n              primary\n              onClick={handleConfirmEmailAddress}\n              size=\"huge\"\n              content=\"Resend email\"\n            />\n          </div>\n        );\n\n      case Status.Success:\n        return (\n          <div>\n            <p>Email has been verified - you can now login!</p>\n\n            <Button\n              primary\n              onClick={() => modalStore.openModal(<LoginForm />)}\n              size=\"huge\"\n            />\n          </div>\n        );\n    }\n  }\n\n  return (\n    <Segment placeholder textAlign=\"center\">\n      <Header icon>\n        <Icon name=\"envelope\" />\n        Email Verification\n      </Header>\n      <Segment.Inline>{getBody()}</Segment.Inline>\n    </Segment>\n  );\n}\n\nexport default observer(ConfirmEmail);\n","import { Container } from 'semantic-ui-react';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport NavBar from './NavBar';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\nimport RegisterSuccess from '../../features/users/RegisterSuccess';\nimport ConfirmEmail from '../../features/users/ConfirmEmail';\n\nfunction App() {\n  // get the location so we can re-render the component as the route change\n  const location = useLocation();\n\n  // get the user info to persist logged in state\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setApploaded());\n    } else {\n      // check for facebook accesstoken\n      userStore.getFacebookLoginStatus().then(() => commonStore.setApploaded());\n    }\n  }, [commonStore, userStore]);\n\n  if (!commonStore.appLoaded)\n    return <LoadingComponent content=\"Loading app...\" />;\n\n  return (\n    <>\n      <ToastContainer position=\"bottom-right\" hideProgressBar />\n\n      <ModalContainer />\n\n      <Route exact path=\"/\" component={HomePage} />\n\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute\n                  exact\n                  path=\"/activities\"\n                  component={ActivityDashboard}\n                />\n                <PrivateRoute\n                  exact\n                  key={location.key}\n                  path={['/createActivity', '/manage/:id']}\n                  component={ActivityForm}\n                />\n\n                <PrivateRoute\n                  exact\n                  path=\"/activities/:id\"\n                  component={ActivityDetails}\n                />\n\n                <PrivateRoute\n                  exact\n                  path=\"/profiles/:username\"\n                  component={ProfilePage}\n                />\n\n                <Route\n                  exact\n                  path=\"/account/registerSuccess\"\n                  component={RegisterSuccess}\n                />\n\n                <Route\n                  exact\n                  path=\"/account/verifyEmail\"\n                  component={ConfirmEmail}\n                />\n\n                {/* Remove the following routes in build */}\n                <Route exact path=\"/errors\" component={TestErrors} />\n                <Route exact path=\"/server-error\" component={ServerError} />\n\n                {/* NOT FOUND PAGE - This is a fallback page when the route is not found */}\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n","import ReactDOM from 'react-dom';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}