{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyDateInput.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfileEdit.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","console","log","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","image","displayName","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","state","createActivity","userStore","attendee","newActivity","hostUsername","attendees","runInAction","updateActivity","updatedActivity","getActivity","act","deleteActivity","loadActivity","isGoing","some","isHost","host","find","x","Date","updateAttendence","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followerCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activities","reduce","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","userActivities","loadingActivities","activeTab","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","getItem","appLoaded","setApploaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComments","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","vertical","size","style","width","marginTop","Header","icon","attached","color","Item","active","has","onClick","onChange","Reveal","animated","Content","visible","Button","fluid","hidden","basic","e","preventDefault","handleFollow","Card","as","Link","to","Image","src","Description","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","inverted","fixed","Container","NavLink","exact","header","alt","marginRight","positive","position","avatar","spaced","Dropdown","pointing","text","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","DateInput","helpers","selected","setValue","MyTextArea","MySelectInput","Select","clearable","options","onBlur","setTouched","categoryOptions","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","MyDateInput","placeholderText","showTimeSelect","timeCaption","dateFormat","border","Comment","resetForm","onKeyPress","shiftKey","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","err","primary","NotFound","Inline","message","Modal","onClose","Statistic","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityForm","ActivityDetails","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.0b304fb1.chunk.js","sourcesContent":["export interface Pagination {\n  currentPage: number;\n  itemsPerPage: number;\n  totalItems: number;\n  totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n  data: T;\n  pagination: Pagination;\n\n  constructor(data: T, pagination: Pagination) {\n    this.data = data;\n    this.pagination = pagination;\n  }\n}\n\n/**\n * the params passed to the server\n */\nexport class PagingParams {\n  pageNumber: number;\n  pageSize: number;\n\n  constructor(pageNumber = 1, pageSize = 2) {\n    this.pageNumber = pageNumber;\n    this.pageSize = pageSize;\n  }\n}\n","//\n// This file will contain all our requests\n// to our Servers\n//\n\nimport axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\n// add some delay to our requests - for development\nconst sleep = (delay: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n};\n\n// set the default url that axios uses\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\n// inteceptor to send our token with requests\naxios.interceptors.request.use((config) => {\n  const token = store.commonStore.token;\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  return config;\n});\n\n// set the axios interceptors\n// delay all requests to the Server by 1 second\naxios.interceptors.response.use(\n  async (response) => {\n    if (process.env.NODE_ENV === 'development') {\n      // add delay for testin in development\n      await sleep(1000);\n    }\n\n    const pagination = response.headers['pagination'];\n\n    if (pagination) {\n      response.data = new PaginatedResult(\n        response.data,\n        JSON.parse(pagination)\n      );\n\n      return response as AxiosResponse<PaginatedResult<any>>;\n    }\n\n    return response;\n  },\n  (error: AxiosError) => {\n    const { data, status, config } = error.response!;\n\n    console.log(error.response);\n\n    switch (status) {\n      case 400:\n        if (typeof data === 'string') {\n          // otherwise, other 400 errors so just display the repsonse data from the API\n          toast.error(data);\n        }\n\n        if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n          // bad guid validation\n          history.push('/not-found');\n        }\n\n        if (data.errors) {\n          // we have the errors object available - form validation error\n\n          const modalStateErrors = [];\n\n          for (const key in data.errors) {\n            if (data.errors[key]) {\n              modalStateErrors.push(data.errors[key]);\n            }\n          }\n          throw modalStateErrors.flat();\n        }\n\n        break;\n\n      case 401:\n        toast.error('Unauthorised');\n        break;\n\n      case 404:\n        history.push('/not-found');\n        break;\n\n      case 500:\n        store.commonStore.setServerError(data);\n        history.push('/server-error');\n        break;\n    }\n    return Promise.reject;\n  }\n);\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\n// this is our requests that we will make to the base URL\n// just to make the code reusable\nconst requests = {\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n  post: <T>(url: string, body: {}) =>\n    axios.post<T>(url, body).then(responseBody),\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n  del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n};\n\nconst Activities = {\n  // list all the activities\n  list: (params: URLSearchParams) =>\n    axios\n      .get<PaginatedResult<Activity[]>>('/activities', { params: params })\n      .then(responseBody),\n\n  details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n\n  create: (activity: ActivityFormValues) =>\n    requests.post<void>('/activities', activity),\n\n  update: (activity: ActivityFormValues) =>\n    requests.put<void>(`/activities/${activity.id}`, activity),\n\n  delete: (id: string) => requests.del<void>(`/activities/${id}`),\n\n  attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\n};\n\nconst Account = {\n  // gets the current user\n  current: () => requests.get<User>('/account'),\n\n  login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n\n  register: (user: UserFormValues) =>\n    requests.post<User>('/account/register', user),\n\n  // facebook login\n  fbLogin: (accessToken: string) =>\n    requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\n};\n\n// send request to Profiles endpoints\nconst Profiles = {\n  get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n  uploadPhoto: (file: Blob) => {\n    let formData = new FormData();\n    formData.append('File', file);\n    return axios.post<Photo>('photos', formData, {\n      headers: { 'Content-type': 'multipart/form-data' },\n    });\n  },\n\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n\n  deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n\n  updateProfile: (profile: Partial<Profile>) =>\n    requests.put('/profiles', profile),\n\n  updateFollowing: (username: string) =>\n    requests.post(`/follow/${username}`, {}),\n\n  listFollowings: (username: string, predicate: string) =>\n    requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n\n  listActivities: (username: string, predicate: string) =>\n    requests.get<UserActivity[]>(\n      `/profiles/${username}/activities?predicate=${predicate}`\n    ),\n};\n\nconst agent = {\n  Activities,\n  Account,\n  Profiles,\n};\n\nexport default agent;\n","import { act } from 'react-dom/test-utils';\nimport { ObjectSchema } from 'yup';\nimport { Profile } from './profile';\n\nexport interface Activity {\n  id: string;\n  title: string;\n  date: Date | null;\n  description: string;\n  category: string;\n  city: string;\n  venue: string;\n\n  hostUsername?: string;\n\n  isCancelled?: boolean;\n\n  isGoing?: boolean; // whether a user is going\n\n  isHost?: boolean; // wheter the logged in user is the host\n\n  host?: Profile;\n\n  attendees?: Profile[];\n}\n\nexport class Activity implements Activity {\n  constructor(init?: ActivityFormValues) {\n    Object.assign(this, init); // populates all of the properties that it can\n  }\n}\n\nexport class ActivityFormValues {\n  id?: string = undefined;\n  title: string = '';\n  category: string = '';\n  description: string = '';\n  date: Date | null = null;\n  city: string = '';\n  venue: string = '';\n\n  constructor(activity?: ActivityFormValues) {\n    if (activity) {\n      this.id = activity.id;\n      this.title = activity.title;\n      this.category = activity.category;\n      this.description = activity.description;\n      this.date = activity.date;\n      this.venue = activity.venue;\n      this.city = activity.city;\n    }\n  }\n}\n","import { User } from './user';\n\nexport interface Profile {\n  username: string;\n  displayName: string;\n  image?: string;\n  bio?: string;\n  photos?: Photo[];\n\n  followerCount: number;\n  followingCount: number;\n  following: boolean;\n}\n\nexport class Profile implements Profile {\n  constructor(user: User) {\n    this.username = user.username;\n    this.image = user.image;\n    this.displayName = user.displayName;\n  }\n}\n\nexport interface Photo {\n  id: string;\n  url: string;\n  isMain: boolean;\n}\n\nexport interface UserActivity {\n  activityId: string;\n  title: string;\n  category: string;\n  date: Date;\n}\n","//\n// Class that stores the state related to activity\n//\n\nimport { format } from 'date-fns';\nimport { makeAutoObservable, reaction, runInAction } from 'mobx';\nimport { act } from 'react-dom/test-utils';\nimport agent from '../api/agent';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { Pagination, PagingParams } from '../models/pagination';\nimport { Profile } from '../models/profile';\nimport { store } from './store';\n\nexport default class ActivityStore {\n  // class properties are observables\n  public activityRegistry = new Map<string, Activity>();\n\n  selectedActivity: Activity | undefined = undefined;\n  editMode = false;\n  loading = false;\n  loadingInitial = false;\n  pagination: Pagination | null = null;\n  pagingParams = new PagingParams();\n\n  // used for filtering for query string parameters\n  predicate = new Map().set('all', true);\n\n  constructor() {\n    makeAutoObservable(this);\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.pagingParams = new PagingParams();\n        this.activityRegistry.clear();\n        this.loadActivities();\n      }\n    );\n  }\n\n  setPagingParams = (pagingParams: PagingParams) => {\n    this.pagingParams = pagingParams;\n  };\n\n  /**\n   *\n   * @param predicate\n   * @param value\n   */\n  setPredicate = (predicate: string, value: string | Date) => {\n    const resetPredicate = () => {\n      this.predicate.forEach((value, key) => {\n        if (key !== 'startDate') this.predicate.delete(key);\n      });\n    };\n\n    switch (predicate) {\n      case 'all':\n        resetPredicate();\n        this.predicate.set('all', true);\n        break;\n\n      case 'isGoing':\n        resetPredicate();\n        this.predicate.set('isGoing', true);\n        break;\n\n      case 'isHost':\n        resetPredicate();\n        this.predicate.set('isHost', true);\n        break;\n\n      case 'startDate':\n        this.predicate.delete('startDate');\n        this.predicate.set('startDate', value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  /**\n   * create the search params\n   */\n  get axiosParams() {\n    const params = new URLSearchParams();\n    params.append('pageNumber', this.pagingParams.pageNumber.toString());\n    params.append('pageSize', this.pagingParams.pageSize.toString());\n\n    this.predicate.forEach((value, key) => {\n      if (key === 'startDate') {\n        params.append(key, (value as Date).toISOString());\n      }\n\n      params.append(key, value);\n    });\n\n    return params;\n  }\n\n  /**\n   * computed property\n   * returns the activities in an array sorted by date\n   */\n  get activities() {\n    return Array.from(this.activityRegistry.values()).sort(\n      (a, b) => a.date!.getTime() - b.date!.getTime()\n    );\n  }\n\n  /**\n   * groups the activities based on their date\n   * we use the date of the activities of the key\n   * and the value is an array of activities\n   */\n  get groupedActivities() {\n    return Object.entries(\n      this.activities.reduce((activities, activity) => {\n        const date = format(activity.date!, 'dd MMM yyyy');\n        activities[date] = activities[date]\n          ? [...activities[date], activity]\n          : [activity];\n        return activities;\n      }, {} as { [key: string]: Activity[] })\n    );\n  }\n\n  // class methods are actions by default\n  loadActivities = async () => {\n    this.loadingInitial = true;\n\n    try {\n      const result = await agent.Activities.list(this.axiosParams);\n\n      result.data.forEach((activity) => {\n        this.setActivity(activity);\n      });\n      this.setPagination(result.pagination);\n      this.setLoadingInitial(false);\n    } catch (error) {\n      console.log(error);\n\n      this.setLoadingInitial(false);\n    }\n  };\n\n  setPagination = (pagination: Pagination) => {\n    this.pagination = pagination;\n  };\n\n  setLoadingInitial = (state: boolean) => {\n    this.loadingInitial = state;\n  };\n\n  createActivity = async (activity: ActivityFormValues) => {\n    // add the user as an attendee and set as host\n    const user = store.userStore.user;\n    const attendee = new Profile(user!);\n\n    try {\n      await agent.Activities.create(activity);\n\n      const newActivity = new Activity(activity);\n\n      newActivity.hostUsername = user!.username;\n      newActivity.attendees = [attendee];\n\n      this.setActivity(newActivity);\n\n      runInAction(() => {\n        this.selectedActivity = newActivity;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  updateActivity = async (activity: ActivityFormValues) => {\n    try {\n      await agent.Activities.update(activity);\n\n      runInAction(() => {\n        if (activity.id) {\n          let updatedActivity = { ...this.getActivity(activity.id), ...act };\n          this.activityRegistry.set(activity.id, updatedActivity as Activity);\n          this.selectedActivity = activity as Activity;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  deleteActivity = async (id: string) => {\n    this.loading = true;\n    try {\n      await agent.Activities.delete(id);\n\n      runInAction(() => {\n        this.activityRegistry.delete(id);\n\n        this.loading = false;\n      });\n    } catch (error) {\n      console.log(error);\n\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  /**\n   * Method to load an individual activity\n   * this method is called when the user refreshed the Activity Detail page\n   * when we dont have the activity in memory\n   */\n  loadActivity = async (id: string) => {\n    let activity = this.getActivity(id);\n\n    if (activity) {\n      this.selectedActivity = activity;\n\n      return activity;\n    } else {\n      this.loadingInitial = true;\n\n      try {\n        activity = await agent.Activities.details(id);\n        this.setActivity(activity);\n        this.selectedActivity = activity;\n        this.setLoadingInitial(false);\n\n        return activity;\n      } catch (error) {\n        console.log(error);\n        this.setLoadingInitial(false);\n      }\n    }\n  };\n\n  private getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  };\n\n  /**\n   * sets the activity as it is loaded\n   * @param activity\n   */\n  private setActivity = (activity: Activity) => {\n    // get hold onto the user object - either null if not logged in or the user\n    const user = store.userStore.user;\n\n    if (user) {\n      // some returns a boolean - true if they are in the attendees list\n      activity.isGoing = activity.attendees!.some(\n        (a) => a.username === user.username\n      );\n\n      // set the activity isHost flag\n      activity.isHost = activity.hostUsername === user.username;\n\n      // set hte host\n      activity.host = activity.attendees?.find(\n        (x) => x.username === activity.hostUsername\n      );\n    }\n\n    activity.date = new Date(activity.date!);\n    this.activityRegistry.set(activity.id, activity);\n  };\n\n  /**\n   * this will work as a toggle\n   */\n  updateAttendence = async () => {\n    // get the cached in user\n    const user = store.userStore.user;\n\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.selectedActivity!.id);\n      runInAction(() => {\n        if (this.selectedActivity?.isGoing) {\n          this.selectedActivity.attendees =\n            this.selectedActivity.attendees?.filter(\n              (a) => a.username !== user?.username\n            );\n          this.selectedActivity.isGoing = false;\n        } else {\n          // create a user profile\n          const attendee = new Profile(user!);\n          this.selectedActivity?.attendees?.push(attendee);\n          this.selectedActivity!.isGoing = true;\n        }\n\n        this.activityRegistry.set(\n          this.selectedActivity!.id,\n          this.selectedActivity!\n        );\n      });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      runInAction(() => (this.loading = false));\n    }\n  };\n\n  cancelActivityToggle = async () => {\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.selectedActivity!.id);\n      runInAction(() => {\n        this.selectedActivity!.isCancelled =\n          !this.selectedActivity!.isCancelled;\n\n        this.activityRegistry.set(\n          this.selectedActivity!.id,\n          this.selectedActivity!\n        );\n      });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  clearSelectedActivity = () => {\n    this.selectedActivity = undefined;\n  };\n\n  updateAttendeeFollowing = (username: string) => {\n    this.activityRegistry.forEach((activity) => {\n      activity.attendees?.forEach((attendee) => {\n        if (attendee.username === username) {\n          attendee.following\n            ? attendee.followerCount--\n            : attendee.followerCount++;\n\n          attendee.following = !attendee.following;\n        }\n      });\n    });\n  };\n}\n","import { makeAutoObservable, reaction, runInAction } from 'mobx';\nimport agent from '../api/agent';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { store } from './store';\n\n/**\n * Profile state cached in our client\n */\nexport default class ProfileStore {\n  profile: Profile | null = null;\n  loadingProfile = false;\n  uploading = false;\n  loading = false;\n  followings: Profile[] = [];\n  loadingFollowings = false;\n\n  userActivities: UserActivity[] = [];\n  loadingActivities = false;\n\n  activeTab = 0;\n\n  constructor() {\n    makeAutoObservable(this);\n\n    reaction(\n      () => this.activeTab,\n      (activeTab) => {\n        if (activeTab === 3 || activeTab === 4) {\n          const predicate = activeTab === 3 ? 'followers' : 'followings';\n          this.loadFollowings(predicate);\n        } else {\n          this.followings = [];\n        }\n      }\n    );\n  }\n\n  setActiveTab = (activeTab: any) => {\n    this.activeTab = activeTab;\n  };\n\n  /**\n   * returns if the profile displayed belongs to the currently logged in user\n   */\n  get isCurrentUser() {\n    if (store.userStore.user && this.profile) {\n      return store.userStore.user.username === this.profile.username;\n    }\n    return false;\n  }\n\n  loadProfile = async (username: string) => {\n    this.loadingProfile = true;\n\n    try {\n      const profile = await agent.Profiles.get(username);\n      runInAction(() => {\n        this.profile = profile;\n        this.loadingProfile = false;\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => {\n        this.loadingProfile = false;\n      });\n    }\n  };\n\n  uploadPhoto = async (file: Blob) => {\n    this.uploading = true;\n\n    try {\n      const response = await agent.Profiles.uploadPhoto(file);\n\n      const photo = response.data;\n\n      runInAction(() => {\n        if (this.profile) {\n          this.profile.photos?.push(photo); // add to local state\n\n          if (photo.isMain && store.userStore.user) {\n            store.userStore.setImage(photo.url);\n            this.profile.image = photo.url;\n          }\n        }\n\n        this.uploading = false;\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => {\n        this.uploading = false;\n      });\n    }\n  };\n\n  setMainPhoto = async (photo: Photo) => {\n    this.loading = true;\n\n    try {\n      await agent.Profiles.setMainPhoto(photo.id); // update on the server\n\n      // update in the client\n      store.userStore.setImage(photo.url);\n\n      runInAction(() => {\n        if (this.profile && this.profile.photos) {\n          this.profile.photos.find((p) => p.isMain)!.isMain = false;\n          this.profile.photos.find((p) => p.id === photo.id)!.isMain = true;\n          this.profile.image = photo.url;\n\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  deletePhoto = async (photo: Photo) => {\n    this.loading = true;\n\n    try {\n      await agent.Profiles.deletePhoto(photo.id);\n\n      runInAction(() => {\n        if (this.profile) {\n          this.profile.photos = this.profile.photos?.filter(\n            (p) => p.id !== photo.id\n          );\n\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  updateProfile = async (profile: Partial<Profile>) => {\n    this.loading = true;\n\n    try {\n      await agent.Profiles.updateProfile(profile);\n\n      runInAction(() => {\n        if (\n          profile.displayName &&\n          profile.displayName !== store.userStore.user?.displayName\n        ) {\n          store.userStore.setDisplayName(profile.displayName);\n        }\n\n        this.profile = { ...this.profile, ...(profile as Profile) };\n        this.loading = false;\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  /**\n   *\n   * @param username target user\n   * @param following what we are about the set the following status to\n   * @returns\n   */\n  updateFollowing = async (username: string, following: boolean) => {\n    this.loading = true;\n\n    try {\n      await agent.Profiles.updateFollowing(username);\n\n      store.activityStore.updateAttendeeFollowing(username);\n\n      runInAction(() => {\n        if (\n          this.profile &&\n          this.profile.username !== store.userStore.user?.username &&\n          this.profile.username === username\n        ) {\n          // it the user is not currently logged in user\n          following\n            ? this.profile.followerCount++\n            : this.profile.followerCount--;\n          this.profile.following = !this.profile.following;\n        }\n\n        if (\n          this.profile &&\n          this.profile.username === store.userStore.user?.username\n        ) {\n          following\n            ? this.profile.followingCount++\n            : this.profile.followingCount--;\n        }\n\n        this.followings.forEach((profile) => {\n          if (profile.username === username) {\n            profile.following\n              ? profile.followerCount--\n              : profile.followerCount++;\n            profile.following = !profile.following;\n          }\n        });\n\n        this.loading = false;\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => (this.loading = false));\n    }\n  };\n\n  loadFollowings = async (predicate: string) => {\n    this.loadingFollowings = true;\n\n    try {\n      const followings = await agent.Profiles.listFollowings(\n        this.profile!.username,\n        predicate\n      );\n\n      runInAction(() => {\n        this.followings = followings;\n        this.loadingFollowings = false;\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => (this.loadingFollowings = false));\n    }\n  };\n\n  loadUserActivities = async (username: string, predicate?: string) => {\n    this.loadingActivities = true;\n\n    try {\n      const activities = await agent.Profiles.listActivities(\n        username,\n        predicate!\n      );\n\n      runInAction(() => {\n        this.userActivities = activities;\n        this.loadingActivities = false;\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(() => (this.loadingActivities = false));\n    }\n  };\n}\n","import { makeAutoObservable, runInAction } from 'mobx';\nimport { history } from '../..';\nimport agent from '../api/agent';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from './store';\n\nexport default class UserStore {\n  user: User | null = null;\n\n  fbAccessToken: string | null = null;\n  fbLoading = false;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  get isLoggedIn() {\n    return !!this.user;\n  }\n\n  login = async (creds: UserFormValues) => {\n    try {\n      const user = await agent.Account.login(creds);\n\n      // set the token\n      store.commonStore.setToken(user.token);\n\n      runInAction(() => {\n        this.user = user;\n      });\n\n      history.push('/activities');\n      store.modalStore.closeModal();\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  logout = () => {\n    store.commonStore.setToken(null);\n    window.localStorage.removeItem('jwt');\n    this.user = null;\n    history.push('/');\n  };\n\n  getUser = async () => {\n    try {\n      const user = await agent.Account.current();\n\n      runInAction(() => {\n        this.user = user;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  register = async (creds: UserFormValues) => {\n    try {\n      const user = await agent.Account.register(creds);\n\n      // set the token\n      store.commonStore.setToken(user.token);\n\n      runInAction(() => {\n        this.user = user;\n      });\n\n      history.push('/activities');\n      store.modalStore.closeModal();\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  setImage = async (image: string) => {\n    if (this.user) this.user.image = image;\n  };\n\n  setDisplayName = (name: string) => {\n    if (this.user) this.user.displayName = name;\n  };\n\n  getFacebookLoginStatus = async () => {\n    window.FB.getLoginStatus((response) => {\n      if (response.status === 'connected') {\n        this.fbAccessToken = response.authResponse.accessToken;\n      }\n    });\n  };\n\n  /**\n   * facebook login\n   * api mehtod called and changes made to our store\n   * request to the facebook APIs\n   */\n  facebookLogin = () => {\n    this.fbLoading = true;\n\n    const apiLogin = (accessToken: string) => {\n      agent.Account.fbLogin(accessToken)\n        .then((user) => {\n          store.commonStore.setToken(user.token);\n\n          runInAction(() => {\n            this.user = user;\n            this.fbLoading = false;\n          });\n\n          history.push('/activities');\n        })\n        .catch((error) => {\n          console.log(error);\n          runInAction(() => (this.fbLoading = false));\n        });\n    };\n\n    if (this.fbAccessToken) {\n      // if we already have the access token\n      apiLogin(this.fbAccessToken);\n    } else {\n      // get a new accessToken from facebook\n      window.FB.login(\n        (response) => {\n          apiLogin(response.authResponse.accessToken);\n        },\n        { scope: 'public_profile,email' }\n      );\n    }\n  };\n}\n","//\n// Main Store to export all the state stores stores\n//\n\nimport { useContext } from 'react';\nimport { createContext } from 'react';\nimport ActivityStore from './activityStore';\nimport CommentStore from './commentStore';\nimport CommonStore from './commonStore';\nimport { ModalStore } from './modalStore';\nimport ProfileStore from './profileStore';\nimport UserStore from './userStore';\n\ninterface Store {\n  activityStore: ActivityStore;\n  commonStore: CommonStore;\n  userStore: UserStore;\n  modalStore: ModalStore;\n  profileStore: ProfileStore;\n  commentStore: CommentStore;\n}\n\nexport const store: Store = {\n  activityStore: new ActivityStore(),\n  commonStore: new CommonStore(),\n  userStore: new UserStore(),\n  modalStore: new ModalStore(),\n  profileStore: new ProfileStore(),\n  commentStore: new CommentStore(),\n};\n\nexport const StoreContext = createContext(store);\n\n// custom react hook to use our stores\nexport function useStore() {\n  return useContext(StoreContext);\n}\n","import { makeAutoObservable, reaction } from 'mobx';\nimport { ServerError } from '../models/serverError';\n\nexport default class CommonStore {\n  error: ServerError | null = null;\n  token: string | null = window.localStorage.getItem('jwt');\n  appLoaded = false;\n\n  constructor() {\n    makeAutoObservable(this);\n\n    // react to the value changing for logged in\n    // this runs when there is a change to this.token or when it initially loads\n    reaction(\n      () => this.token,\n      (token) => {\n        if (token) {\n          window.localStorage.setItem('jwt', token);\n        } else {\n          window.localStorage.removeItem('jwt');\n        }\n      }\n    );\n  }\n\n  setServerError = (error: ServerError) => {\n    this.error = error;\n  };\n\n  setToken = (token: string | null) => {\n    if (token) {\n      this.token = token;\n    }\n  };\n\n  setApploaded = () => {\n    this.appLoaded = true;\n  };\n}\n","//\n// Class that stores the state related to modal\n// So the modals can be accessed from anywhere in the application\n//\n\nimport { makeAutoObservable } from 'mobx';\n\ninterface Modal {\n  open: boolean;\n  body: JSX.Element | null;\n}\n\nexport class ModalStore {\n  modal: Modal = {\n    open: false,\n    body: null,\n  };\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  /**\n   *\n   * @param content is a React component\n   * @returns\n   */\n  openModal = (content: JSX.Element) => {\n    this.modal.open = true;\n    this.modal.body = content;\n  };\n\n  /**\n   *\n   */\n  closeModal = () => {\n    this.modal.open = false;\n    this.modal.body = null;\n  };\n}\n","import {\n  HubConnection,\n  HubConnectionBuilder,\n  LogLevel,\n} from '@microsoft/signalr';\nimport { makeAutoObservable, runInAction } from 'mobx';\nimport { ChatComment } from '../models/comment';\nimport { store } from './store';\n\nexport default class CommentStore {\n  comments: ChatComment[] = [];\n\n  hubConnection: HubConnection | null = null;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  createHubConnection = (activityId: string) => {\n    // make sure there is selected activity in activity store\n    if (store.activityStore.selectedActivity) {\n      // create the connection\n      this.hubConnection = new HubConnectionBuilder()\n        .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n          accessTokenFactory: () => store.userStore.user!.token,\n        })\n        .withAutomaticReconnect()\n        .configureLogging(LogLevel.Information)\n        .build();\n\n      // start connection\n      this.hubConnection\n        .start()\n        .catch((error) =>\n          console.log('Error establishing the connection: ' + error)\n        );\n\n      // call the method in our API\n      this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n        // update the observable\n        runInAction(() => {\n          // format the date string to JavaScript Date Object\n          // append Z to make it UTC Time\n          comments.forEach((comment) => {\n            comment.createdAt = new Date(comment.createdAt + 'Z');\n          });\n          this.comments = comments;\n        });\n      });\n\n      // on a new comment is receives\n      this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n        // add the comment to the state\n        runInAction(() => {\n          // format the date string to JavaScript Date Object\n          comment.createdAt = new Date(comment.createdAt);\n\n          this.comments.unshift(comment);\n        });\n      });\n    }\n  };\n\n  stopHubConnection = () => {\n    this.hubConnection\n      ?.stop()\n      .catch((error) => console.log('Error stopping connection: ' + error));\n  };\n\n  clearComments = () => {\n    this.comments = [];\n    this.stopHubConnection();\n  };\n\n  addComments = async (values: any) => {\n    values.activityId = store.activityStore.selectedActivity?.id;\n\n    try {\n      // invoke a method in the server\n      await this.hubConnection?.invoke('SendComment', values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\n","import { observer } from 'mobx-react-lite';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nfunction ActivityFilters() {\n  const {\n    activityStore: { predicate, setPredicate },\n  } = useStore();\n\n  return (\n    <>\n      <Menu vertical size=\"large\" style={{ width: '100%', marginTop: 25 }}>\n        <Header icon=\"filter\" attached color=\"teal\" content=\"Filters\" />\n        <Menu.Item\n          active={predicate.has('all')}\n          onClick={() => setPredicate('all', 'true')}\n          content=\"All Activities\"\n        />\n        <Menu.Item\n          content=\"I'm going\"\n          active={predicate.has('isGoing')}\n          onClick={() => setPredicate('isGoing', 'true')}\n        />\n        <Menu.Item\n          content=\"I'm hosting\"\n          active={predicate.has('isHost')}\n          onClick={() => setPredicate('isHost', 'true')}\n        />\n      </Menu>\n      <Header />\n      <Calendar\n        onChange={(date) => setPredicate('startDate', date as Date)}\n        value={predicate.get('startDate') || new Date()}\n      />\n    </>\n  );\n}\n\nexport default observer(ActivityFilters);\n","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Reveal, Button } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n  profile: Profile;\n}\n\nfunction FollowButton({ profile }: Props) {\n  const { profileStore, userStore } = useStore();\n\n  const { updateFollowing, loading } = profileStore;\n\n  if (userStore.user?.username === profile.username) return null;\n\n  function handleFollow(e: SyntheticEvent, username: string) {\n    e.preventDefault();\n    profile.following\n      ? updateFollowing(username, false) // unfollow the user\n      : updateFollowing(username, true); // follow the user\n  }\n\n  return (\n    <Reveal animated=\"move\">\n      <Reveal.Content visible style={{ width: '100%' }}>\n        <Button\n          fluid\n          color=\"teal\"\n          content={profile.following ? 'Following' : 'Not Following'}\n        />\n      </Reveal.Content>\n      <Reveal.Content hidden style={{ width: '100%' }}>\n        <Button\n          fluid\n          basic\n          color={profile.following ? 'red' : 'green'}\n          content={profile.following ? 'Unfollow' : 'Follow'}\n          loading={loading}\n          onClick={(e) => handleFollow(e, profile.username)}\n        />\n      </Reveal.Content>\n    </Reveal>\n  );\n}\n\nexport default observer(FollowButton);\n","import { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { Card, Image, Icon } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n  profile: Profile;\n}\n\nfunction ProfileCard({ profile }: Props) {\n  return (\n    <Card as={Link} to={`/profiles/${profile.username}`}>\n      <Image src={profile.image || '/assets/user.png'} />\n      <Card.Content>\n        <Card.Header>{profile.displayName}</Card.Header>\n\n        <Card.Description>{profile.bio}</Card.Description>\n\n        <Card.Content extra>\n          <Icon name=\"user\" />\n          {profile.followerCount}{' '}\n          {profile.followerCount > 1 ? 'followers' : 'follower'}\n        </Card.Content>\n      </Card.Content>\n\n      <FollowButton profile={profile} />\n    </Card>\n  );\n}\n\nexport default observer(ProfileCard);\n","import { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { List, Image, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n  attendees: Profile[];\n}\n\nfunction ActivityListItemAttendee({ attendees }: Props) {\n  const styles = {\n    borderColor: 'orange',\n    borderWidth: 2,\n  };\n\n  return (\n    <List horizontal>\n      {attendees.map((attendee) => (\n        <>\n          <Popup\n            hoverable\n            key={attendee.username}\n            trigger={\n              <List.Item\n                key={attendee.username}\n                as={Link}\n                to={`/profiles/${attendee.username}`}\n              >\n                <Image\n                  size=\"mini\"\n                  circular\n                  bordered\n                  style={attendee.following ? styles : null}\n                  src={attendee.image || '/assets/user.png'}\n                />\n              </List.Item>\n            }\n          >\n            <Popup.Content>\n              <ProfileCard profile={attendee} />\n            </Popup.Content>\n          </Popup>\n        </>\n      ))}\n    </List>\n  );\n}\n\nexport default observer(ActivityListItemAttendee);\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { Item, Button, Segment, Icon, Label } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props {\n  activity: Activity;\n}\n\nfunction ActivityListItem({ activity }: Props) {\n  return (\n    <Segment.Group>\n      <Segment>\n        {activity.isCancelled && (\n          <Label\n            attached=\"top\"\n            color=\"red\"\n            content=\"Cancelled\"\n            style={{ textAlign: 'center' }}\n          />\n        )}\n        <Item.Group>\n          <Item>\n            <Item.Image\n              style={{ marginBottom: 3 }}\n              size=\"tiny\"\n              circular\n              src={activity.host?.image || '/assets/user.png'}\n            />\n            <Item.Content>\n              <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                {activity.title}\n              </Item.Header>\n              <Item.Description>\n                Hosted by{' '}\n                <Link to={`/profiles/${activity.host?.username}`}>\n                  {activity.host?.displayName}\n                </Link>\n              </Item.Description>\n\n              {activity.isHost && (\n                <Item.Description>\n                  <Label basic color=\"orange\">\n                    You are hosting this activity\n                  </Label>\n                </Item.Description>\n              )}\n\n              {activity.isGoing && !activity.isHost && (\n                <Item.Description>\n                  <Label basic color=\"teal\">\n                    You are going to this activity\n                  </Label>\n                </Item.Description>\n              )}\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      </Segment>\n      <Segment>\n        <span>\n          <Icon name=\"clock\" /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n          <Icon name=\"marker\" /> {activity.venue}\n        </span>\n      </Segment>\n      <Segment secondary>\n        <ActivityListItemAttendee attendees={activity.attendees!} />\n      </Segment>\n      <Segment clearing>\n        <span>{activity.description}</span>\n        <Button\n          as={Link}\n          to={`/activities/${activity.id}`}\n          color=\"teal\"\n          floated=\"right\"\n          content=\"View\"\n        />\n      </Segment>\n    </Segment.Group>\n  );\n}\n\nexport default observer(ActivityListItem);\n","import { observer } from 'mobx-react-lite';\nimport { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nfunction ActivityList() {\n  const { activityStore } = useStore();\n  const { groupedActivities } = activityStore;\n\n  return (\n    <>\n      {/* key is the date of the activities we use as a key, key of the object\n          we are grabbing each key value pair\n      */}\n      {groupedActivities.map(([group, activities]) => (\n        <Fragment key={group}>\n          <Header sub color=\"teal\">\n            {group}\n          </Header>\n\n          {activities.map((activity) => (\n            <ActivityListItem key={activity.id} activity={activity} />\n          ))}\n        </Fragment>\n      ))}\n    </>\n  );\n}\n\nexport default observer(ActivityList);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nfunction ActivityListItemPlaceholder() {\n  return (\n    <Fragment>\n      <Placeholder fluid style={{ marginTop: 25 }}>\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color=\"blue\" floated=\"right\" content=\"View\" />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n}\n\nexport default ActivityListItemPlaceholder;\n","import { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid, List, Loader } from 'semantic-ui-react';\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityList from './ActivityList';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\n\nfunction ActivityDashboard() {\n  const { activityStore } = useStore();\n  const { loadActivities, activityRegistry, pagination, setPagingParams } =\n    activityStore;\n\n  const [loadingNext, setLoadingNext] = useState<boolean>(false);\n\n  function handleGetNext() {\n    setLoadingNext(true);\n    setPagingParams(new PagingParams(pagination!.currentPage + 1));\n    loadActivities().then(() => setLoadingNext(false));\n  }\n\n  useEffect(() => {\n    if (activityRegistry.size <= 1) loadActivities();\n  }, [loadActivities, activityRegistry.size]);\n\n  return (\n    <Grid>\n      <Grid.Column width=\"10\">\n        {activityStore.loadingInitial && !loadingNext ? (\n          <>\n            <ActivityListItemPlaceholder />\n            <ActivityListItemPlaceholder />\n          </>\n        ) : (\n          <List>\n            <InfiniteScroll\n              pageStart={0}\n              loadMore={handleGetNext}\n              hasMore={\n                !loadingNext &&\n                !!pagination &&\n                pagination.currentPage < pagination.totalPages\n              }\n              initialLoad={false}\n            >\n              <ActivityList />\n            </InfiniteScroll>\n          </List>\n        )}\n      </Grid.Column>\n\n      <Grid.Column width=\"6\">\n        <ActivityFilters />\n      </Grid.Column>\n\n      <Grid.Column width=\"10\">\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default observer(ActivityDashboard);\n","import { observer } from 'mobx-react-lite';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nfunction NavBar() {\n  const { userStore } = useStore();\n  const { logout, user } = userStore;\n\n  return (\n    <Menu inverted fixed=\"top\">\n      <Container>\n        <Menu.Item as={NavLink} exact to=\"/\" header>\n          <img\n            src=\"/assets/logo.png\"\n            alt=\"logo\"\n            style={{ marginRight: '10px' }}\n          />\n          Reactivities\n        </Menu.Item>\n        <Menu.Item as={NavLink} exact to=\"/activities\" name=\"Activities\" />\n        <Menu.Item as={NavLink} exact to=\"/errors\" name=\"Errors\" />\n        <Menu.Item>\n          <Button\n            as={NavLink}\n            exact\n            to=\"/createActivity\"\n            positive\n            content=\"Create Activity\"\n          />\n        </Menu.Item>\n\n        <Menu.Item position=\"right\">\n          <Image src={user?.image || 'assets/user.png'} avatar spaced=\"right\" />\n          <Dropdown pointing=\"top left\" text={user?.displayName}>\n            <Dropdown.Menu>\n              <Dropdown.Item\n                as={Link}\n                to={`/profiles/${user?.username}`}\n                text=\"My Profile\"\n                icon=\"user\"\n              />\n\n              <Dropdown.Item onClick={logout} text=\"Logout\" icon=\"power\" />\n            </Dropdown.Menu>\n          </Dropdown>\n        </Menu.Item>\n      </Container>\n    </Menu>\n  );\n}\n\nexport default observer(NavBar);\n","import { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n  placeholder: string;\n  name: string;\n  label?: string;\n  type?: string;\n}\n\nfunction MyTextInput(props: Props) {\n  const [field, meta] = useField(props.name);\n\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <label>{props.label}</label>\n\n      <input {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <Label basic color=\"red\">\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n}\n\nexport default MyTextInput;\n","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nfunction LoginForm() {\n  const { userStore } = useStore();\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '', error: '' }}\n      onSubmit={(values, { setErrors }) =>\n        userStore.login(values).catch((error) => setErrors({ error: 'error' }))\n      }\n    >\n      {({ handleSubmit, isSubmitting, errors }) => (\n        <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\n          <Header\n            as=\"h2\"\n            content=\"Login to Reactivites\"\n            color=\"teal\"\n            textAlign=\"center\"\n          />\n          <MyTextInput name=\"email\" placeholder=\"Email\" />\n          <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\n          <ErrorMessage\n            name=\"error\"\n            render={() => (\n              <Label\n                style={{ marginBottom: 10 }}\n                basic\n                color=\"red\"\n                content={errors.error}\n              />\n            )}\n          />\n          <Button\n            loading={isSubmitting}\n            positive\n            content=\"Login\"\n            type=\"submit\"\n            fluid\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default observer(LoginForm);\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n  errors: any;\n}\n\nfunction ValidationErrors({ errors }: Props) {\n  return (\n    <Message error>\n      {errors && (\n        <Message.List>\n          {errors.map((error: any, i: any) => (\n            <Message.Item key={i}>{error}</Message.Item>\n          ))}\n        </Message.List>\n      )}\n    </Message>\n  );\n}\n\nexport default ValidationErrors;\n","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nfunction RegisterForm() {\n  const { userStore } = useStore();\n\n  return (\n    <Formik\n      initialValues={{\n        displayName: '',\n        username: '',\n        email: '',\n        password: '',\n        error: '',\n      }}\n      onSubmit={(values, { setErrors }) =>\n        userStore.register(values).catch((error) => setErrors({ error: error }))\n      }\n      validationSchema={Yup.object({\n        displayName: Yup.string().required(),\n        username: Yup.string().required(),\n        email: Yup.string().required().email(),\n        password: Yup.string().required(),\n      })}\n    >\n      {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\n        <Form\n          className=\"ui form error\"\n          onSubmit={handleSubmit}\n          autoComplete=\"off\"\n        >\n          <Header\n            as=\"h2\"\n            content=\"Sign up to Reactivites\"\n            color=\"teal\"\n            textAlign=\"center\"\n          />\n          <MyTextInput name=\"displayName\" placeholder=\"Display Name\" />\n          <MyTextInput name=\"username\" placeholder=\"Username\" />\n          <MyTextInput name=\"email\" placeholder=\"Email\" />\n          <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\n          <ErrorMessage\n            name=\"error\"\n            render={() => <ValidationErrors errors={errors.error} />}\n          />\n\n          <Button\n            disabled={!isValid || !dirty || isSubmitting}\n            loading={isSubmitting}\n            positive\n            content=\"Register\"\n            type=\"submit\"\n            fluid\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default observer(RegisterForm);\n","import { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport {\n  Container,\n  Header,\n  Segment,\n  Image,\n  Button,\n  Divider,\n} from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nfunction HomePage() {\n  const { userStore, modalStore } = useStore();\n\n  return (\n    <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\n      <Container text>\n        <Header as=\"h1\" inverted>\n          <Image\n            size=\"massive\"\n            src=\"/assets/logo.png\"\n            alt=\"logo\"\n            style={{ marginBottom: 12 }}\n          />\n          Reactivities\n        </Header>\n\n        {userStore.isLoggedIn ? (\n          <>\n            <Header as=\"h2\" inverted content=\"Welcome to Reactivities\" />\n            <Button as={Link} to=\"/activities\" size=\"huge\" inverted>\n              Go to Activities!\n            </Button>\n          </>\n        ) : (\n          <>\n            <Button\n              onClick={() => modalStore.openModal(<LoginForm />)}\n              size=\"huge\"\n              inverted\n            >\n              Login\n            </Button>\n\n            <Button\n              onClick={() => modalStore.openModal(<RegisterForm />)}\n              size=\"huge\"\n              inverted\n            >\n              Register\n            </Button>\n\n            <Divider horizontal inverted>\n              Or\n            </Divider>\n            <Button\n              loading={userStore.fbLoading}\n              disabled={userStore.fbLoading}\n              size=\"huge\"\n              inverted\n              color=\"facebook\"\n              content=\"Login with Facebook\"\n              onClick={userStore.facebookLogin}\n            />\n          </>\n        )}\n      </Container>\n    </Segment>\n  );\n}\n\nexport default observer(HomePage);\n","import { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n  inverted?: boolean;\n  content: string;\n}\n\nexport default function LoadingComponent({\n  inverted = true,\n  content = 'Loading...',\n}: Props) {\n  return (\n    <Dimmer active={true} inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n}\n","import { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\n\n// use Partial<T> to make all the props optional\nfunction DateInput(props: Partial<ReactDatePickerProps>) {\n  const [field, meta, helpers] = useField(props.name!);\n\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <DatePicker\n        {...field}\n        {...props}\n        // overriding the props as we specify individually\n        selected={(field.value && new Date(field.value)) || null}\n        onChange={(value) => helpers.setValue(value)}\n      />\n\n      {meta.touched && meta.error ? (\n        <Label basic color=\"red\">\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n}\n\nexport default DateInput;\n","import { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n  placeholder: string;\n  name: string;\n  rows: number;\n  label?: string;\n}\n\nfunction MyTextArea(props: Props) {\n  const [field, meta] = useField(props.name);\n\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <label>{props.label}</label>\n\n      <textarea {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <Label basic color=\"red\">\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n}\n\nexport default MyTextArea;\n","import { useField } from 'formik';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n  placeholder: string;\n  name: string;\n  options: any;\n  label?: string;\n}\n\nfunction MySelectInput(props: Props) {\n  // helpers allows us to manually set a value\n  // and manually set the touched status of the input component\n  const [field, meta, helpers] = useField(props.name);\n\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <label>{props.label}</label>\n\n      <Select\n        clearable\n        options={props.options}\n        value={field.value || null}\n        onChange={(e, data) => helpers.setValue(data.value)}\n        onBlur={() => helpers.setTouched(true)}\n        placeholder={props.placeholder}\n      />\n\n      {meta.touched && meta.error ? (\n        <Label basic color=\"red\">\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n}\n\nexport default MySelectInput;\n","export const categoryOptions = [\n  { text: 'Drinks', value: 'drinks' },\n  { text: 'Culture', value: 'culture' },\n  { text: 'Film', value: 'film' },\n  { text: 'Food', value: 'food' },\n  { text: 'Music', value: 'music' },\n  { text: 'Travel', value: 'travel' },\n];\n","import { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport { ActivityFormValues } from '../../../app/models/activity';\n\nfunction ActivityForm() {\n  const { activityStore } = useStore();\n  const { createActivity, updateActivity, loadActivity, loadingInitial } =\n    activityStore;\n\n  // to push the user to a page\n  const history = useHistory();\n\n  // get the id from the router params\n  const { id } = useParams<{ id: string }>();\n\n  const [activity, setActivity] = useState<ActivityFormValues>(\n    new ActivityFormValues()\n  );\n\n  useEffect(() => {\n    if (id)\n      loadActivity(id).then((activity) => {\n        setActivity(new ActivityFormValues(activity));\n      });\n  }, [id, loadActivity]);\n\n  function handleFormSubmit(activity: ActivityFormValues) {\n    if (!activity.id) {\n      let newActivity = { ...activity, id: uuid() };\n      createActivity(newActivity).then(() => {\n        history.push(`/activities/${newActivity.id}`);\n      });\n    } else {\n      updateActivity(activity).then(() => {\n        history.push(`/activities/${activity.id}`);\n      });\n    }\n  }\n\n  const validationSchema = Yup.object({\n    title: Yup.string().required('The activity title is required'),\n    description: Yup.string().required('The activity description is required'),\n    category: Yup.string().required(),\n    date: Yup.string().required('Date is required').nullable(),\n    venue: Yup.string().required(),\n    city: Yup.string().required(),\n  });\n\n  if (loadingInitial && id) {\n    return <LoadingComponent content=\"Loading...\" />;\n  }\n\n  return (\n    <Segment clearing>\n      <Header content=\"Activity Details\" sub color=\"teal\" />\n      <Formik\n        enableReinitialize\n        validationSchema={validationSchema}\n        initialValues={activity}\n        onSubmit={(values) => handleFormSubmit(values)}\n      >\n        {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n          <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\n            <MyTextInput name=\"title\" placeholder=\"Title\" />\n\n            <MyTextArea rows={3} placeholder=\"Description\" name=\"description\" />\n            <MySelectInput\n              options={categoryOptions}\n              placeholder=\"Category\"\n              name=\"category\"\n            />\n            <MyDateInput\n              placeholderText=\"Date\"\n              name=\"date\"\n              showTimeSelect\n              timeCaption=\"time\"\n              dateFormat=\"MMMM d, yyyy h:mm aa\"\n            />\n\n            <Header content=\"Location Details\" sub color=\"teal\" />\n\n            <MyTextInput placeholder=\"City\" name=\"city\" />\n            <MyTextInput placeholder=\"Venue\" name=\"venue\" />\n\n            <Button\n              loading={isSubmitting}\n              floated=\"right\"\n              positive\n              disabled={isSubmitting || !dirty || !isValid}\n              type=\"submit\"\n              content=\"Submit\"\n            />\n            <Button\n              as={Link}\n              to=\"/activities\"\n              floated=\"right\"\n              type=\"button\"\n              content=\"Cancel\"\n            />\n          </Form>\n        )}\n      </Formik>\n    </Segment>\n  );\n}\n\nexport default observer(ActivityForm);\n","import { Formik, Form, Field, FieldProps } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface Props {\n  activityId: string;\n}\n\nfunction ActivityDetailedChat({ activityId }: Props) {\n  const { commentStore } = useStore();\n\n  useEffect(() => {\n    if (activityId) {\n      commentStore.createHubConnection(activityId);\n    }\n    return () => {\n      commentStore.clearComments();\n    };\n  }, [commentStore, activityId]);\n\n  return (\n    <>\n      <Segment\n        textAlign=\"center\"\n        attached=\"top\"\n        inverted\n        color=\"teal\"\n        style={{ border: 'none' }}\n      >\n        <Header>Chat about this event</Header>\n      </Segment>\n      <Segment attached clearing>\n        <Comment.Group>\n          <Formik\n            onSubmit={(values, { resetForm }) =>\n              commentStore.addComments(values).then(() => resetForm())\n            }\n            initialValues={{ body: '' }}\n            validationSchema={Yup.object({\n              body: Yup.string().required(),\n            })}\n          >\n            {({ isSubmitting, isValid, dirty, handleSubmit }) => (\n              <Form className=\"ui form\">\n                <Field name=\"body\">\n                  {(props: FieldProps) => (\n                    <div style={{ position: 'relative' }}>\n                      <Loader active={isSubmitting} />\n                      <textarea\n                        placeholder=\"Enter your comment (Enter to submit, SHIFT + Enter for a new line)\"\n                        rows={2}\n                        {...props.field}\n                        onKeyPress={(e) => {\n                          if (e.key === 'Enter' && e.shiftKey) {\n                            return;\n                          }\n                          if (e.key === 'Enter' && !e.shiftKey) {\n                            e.preventDefault();\n                            isValid && handleSubmit();\n                          }\n                        }}\n                      />\n                    </div>\n                  )}\n                </Field>\n              </Form>\n            )}\n          </Formik>\n          {commentStore.comments.map((comment) => (\n            <Comment key={comment.id}>\n              <Comment.Avatar src={comment.image || '/assets/user.png'} />\n              <Comment.Content>\n                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                  {comment.displayName}\n                </Comment.Author>\n                <Comment.Metadata>\n                  <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                </Comment.Metadata>\n                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>\n                  {comment.body}\n                </Comment.Text>\n              </Comment.Content>\n            </Comment>\n          ))}\n        </Comment.Group>\n      </Segment>\n    </>\n  );\n}\n\nexport default observer(ActivityDetailedChat);\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n  filter: 'brightness(30%)',\n};\n\nconst activityImageTextStyle = {\n  position: 'absolute',\n  bottom: '5%',\n  left: '5%',\n  width: '100%',\n  height: 'auto',\n  color: 'white',\n};\n\ninterface Props {\n  activity: Activity;\n}\n\nfunction ActivityDetailedHeader({ activity }: Props) {\n  const {\n    activityStore: { cancelActivityToggle, updateAttendence, loading },\n  } = useStore();\n\n  return (\n    <Segment.Group>\n      <Segment basic attached=\"top\" style={{ padding: '0' }}>\n        {activity.isCancelled && (\n          <Label\n            style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\n            ribbon\n            color=\"red\"\n            content=\"Cancelled\"\n          />\n        )}\n\n        <Image\n          src={`/assets/categoryImages/${activity.category}.jpg`}\n          fluid\n          style={activityImageStyle}\n        />\n        <Segment style={activityImageTextStyle} basic>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <Header\n                  size=\"huge\"\n                  content={activity.title}\n                  style={{ color: 'white' }}\n                />\n                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                <p>\n                  Hosted by{' '}\n                  <strong>\n                    <Link to={`/profiles/${activity.hostUsername}`}>\n                      {activity.host?.displayName}\n                    </Link>\n                  </strong>\n                </p>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n      <Segment clearing attached=\"bottom\">\n        {activity.isHost ? (\n          <>\n            <Button\n              onClick={cancelActivityToggle}\n              loading={loading}\n              disabled={loading}\n              color={activity.isCancelled ? 'green' : 'red'}\n              floated=\"left\"\n              basic\n            >\n              {activity.isCancelled\n                ? 'Re-activate Activity'\n                : 'Cancel Activity'}\n            </Button>\n            <Button\n              disabled={activity.isCancelled}\n              as={Link}\n              to={`/manage/${activity.id}`}\n              color=\"orange\"\n              floated=\"right\"\n            >\n              Manage Event\n            </Button>\n          </>\n        ) : activity.isGoing ? (\n          <Button\n            disabled={loading}\n            loading={loading}\n            onClick={updateAttendence}\n          >\n            Cancel attendance\n          </Button>\n        ) : (\n          <Button\n            disabled={loading || activity.isCancelled}\n            loading={loading}\n            onClick={updateAttendence}\n            color=\"teal\"\n          >\n            Join Activity\n          </Button>\n        )}\n      </Segment>\n    </Segment.Group>\n  );\n}\n\nexport default observer(ActivityDetailedHeader);\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\n\ninterface Props {\n  activity: Activity;\n}\n\nfunction ActivityDetailedInfo({ activity }: Props) {\n  return (\n    <Segment.Group>\n      <Segment attached=\"top\">\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size=\"large\" color=\"teal\" name=\"info\" />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>{activity.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign=\"middle\">\n          <Grid.Column width={1}>\n            <Icon name=\"calendar\" size=\"large\" color=\"teal\" />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <span>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign=\"middle\">\n          <Grid.Column width={1}>\n            <Icon name=\"marker\" size=\"large\" color=\"teal\" />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {activity.venue}, {activity.city}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n}\n\nexport default observer(ActivityDetailedInfo);\n","import { Segment, List, Label, Item, Image } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { Activity } from '../../../app/models/activity';\n\ninterface Props {\n  activity: Activity;\n}\n\nfunction ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\n  if (!attendees) {\n    return null;\n  }\n\n  return (\n    <>\n      <Segment\n        textAlign=\"center\"\n        style={{ border: 'none' }}\n        attached=\"top\"\n        secondary\n        inverted\n        color=\"teal\"\n      >\n        {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} Going\n      </Segment>\n      <Segment attached>\n        <List relaxed divided>\n          {attendees.map((attendee) => (\n            <Item key={attendee.username} style={{ position: 'relative' }}>\n              {attendee.username === host?.username && (\n                <Label\n                  style={{ position: 'absolute' }}\n                  color=\"orange\"\n                  ribbon=\"right\"\n                >\n                  Host\n                </Label>\n              )}\n\n              <Image size=\"tiny\" src={attendee.image || '/assets/user.png'} />\n              <Item.Content verticalAlign=\"middle\">\n                <Item.Header as=\"h3\">\n                  <Link to={`/profiles/${attendee.username}`}>\n                    {attendee.displayName}\n                  </Link>\n                </Item.Header>\n                {attendee.following && (\n                  <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\n                )}\n              </Item.Content>\n            </Item>\n          ))}\n        </List>\n      </Segment>\n    </>\n  );\n}\n\nexport default observer(ActivityDetailedSidebar);\n","import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\nfunction ActivityDetails() {\n  const { activityStore } = useStore();\n  const {\n    selectedActivity: activity,\n    loadActivity,\n    loadingInitial,\n    clearSelectedActivity,\n  } = activityStore;\n\n  // get the id from hte url\n  const { id } = useParams<{ id: string }>();\n\n  useEffect(() => {\n    if (id) {\n      loadActivity(id);\n    }\n    return () => clearSelectedActivity();\n  }, [id, loadActivity, clearSelectedActivity]);\n\n  if (loadingInitial || !activity)\n    return <LoadingComponent content=\"Loading...\" />;\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <ActivityDetailedHeader activity={activity} />\n        <ActivityDetailedInfo activity={activity} />\n        <ActivityDetailedChat activityId={activity.id} />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <ActivityDetailedSidebar activity={activity} />\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default observer(ActivityDetails);\n","import { Button, Header, Segment } from 'semantic-ui-react';\nimport axios from 'axios';\nimport { useState } from 'react';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n  const baseUrl = process.env.REACT_APP_API_URL;\n\n  const [errors, setErrors] = useState(null);\n\n  function handleNotFound() {\n    axios\n      .get(baseUrl + 'buggy/not-found')\n      .catch((err) => console.log(err.response));\n  }\n\n  function handleBadRequest() {\n    axios\n      .get(baseUrl + 'buggy/bad-request')\n      .catch((err) => console.log(err.response));\n  }\n\n  function handleServerError() {\n    axios\n      .get(baseUrl + 'buggy/server-error')\n      .catch((err) => console.log(err.response));\n  }\n\n  function handleUnauthorised() {\n    axios\n      .get(baseUrl + 'buggy/unauthorised')\n      .catch((err) => console.log(err.response));\n  }\n\n  function handleBadGuid() {\n    axios\n      .get(baseUrl + 'activities/notaguid')\n      .catch((err) => console.log(err.response));\n  }\n\n  function handleValidationError() {\n    axios.post(baseUrl + 'activities', {}).catch((err) => setErrors(err));\n  }\n\n  return (\n    <>\n      <Header as=\"h1\" content=\"Test Error component\" />\n      <Segment>\n        <Button.Group widths=\"7\">\n          <Button onClick={handleNotFound} content=\"Not Found\" basic primary />\n          <Button\n            onClick={handleBadRequest}\n            content=\"Bad Request\"\n            basic\n            primary\n          />\n          <Button\n            onClick={handleValidationError}\n            content=\"Validation Error\"\n            basic\n            primary\n          />\n          <Button\n            onClick={handleServerError}\n            content=\"Server Error\"\n            basic\n            primary\n          />\n          <Button\n            onClick={handleUnauthorised}\n            content=\"Unauthorised\"\n            basic\n            primary\n          />\n          <Button onClick={handleBadGuid} content=\"Bad Guid\" basic primary />\n        </Button.Group>\n      </Segment>\n\n      {errors && <ValidationErrors errors={errors} />}\n    </>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nfunction NotFound() {\n  return (\n    <Segment placeholder>\n      <Header icon>\n        <Icon name=\"search\" />\n        Oops - we've looked everywhere and could not find this.\n      </Header>\n      <Segment.Inline>\n        <Button as={Link} to=\"/activities\" primary>\n          Return to activities page\n        </Button>\n      </Segment.Inline>\n    </Segment>\n  );\n}\n\nexport default NotFound;\n","import { observer } from 'mobx-react-lite';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nfunction ServerError() {\n  const { commonStore } = useStore();\n\n  return (\n    <Container>\n      <Header as=\"h1\" content=\"Server Error\" />\n      <Header as=\"h2\" color=\"red\" content={commonStore.error?.message} />\n\n      {commonStore.error?.details && (\n        <Segment>\n          <Header as=\"h4\" content=\"Stack Trace\" color=\"teal\" />\n          <code style={{ marginTop: '10px' }}>{commonStore.error.details}</code>\n        </Segment>\n      )}\n    </Container>\n  );\n}\n\nexport default observer(ServerError);\n","import { observer } from 'mobx-react-lite';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nfunction ModalContainer() {\n  const { modalStore } = useStore();\n\n  return (\n    <Modal\n      open={modalStore.modal.open}\n      onClose={modalStore.closeModal}\n      size=\"mini\"\n    >\n      <Modal.Content>{modalStore.modal.body}</Modal.Content>\n    </Modal>\n  );\n}\n\nexport default observer(ModalContainer);\n","import { observer } from 'mobx-react-lite';\nimport {\n  Segment,\n  Grid,\n  Item,\n  Header,\n  Statistic,\n  Divider,\n  Reveal,\n  Button,\n} from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n  profile: Profile;\n}\n\nfunction ProfileHeader({ profile }: Props) {\n  return (\n    <Segment>\n      <Grid>\n        <Grid.Column width={12}>\n          <Item.Group>\n            <Item>\n              <Item.Image\n                avatar\n                size=\"small\"\n                src={profile.image || `/assets/user.png`}\n              />\n              <Item.Content verticalAlign=\"middle\">\n                <Header as=\"h1\" content={profile.displayName} />\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Grid.Column>\n        <Grid.Column width={4}>\n          <Statistic.Group widths={2}>\n            <Statistic label=\"Followers\" value={profile.followerCount} />\n            <Statistic label=\"Following\" value={profile.followingCount} />\n          </Statistic.Group>\n          <Divider />\n          <FollowButton profile={profile} />\n        </Grid.Column>\n      </Grid>\n    </Segment>\n  );\n}\n\nexport default observer(ProfileHeader);\n","import { Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport MyTextArea from '../../app/common/form/MyTextArea';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { Button } from 'semantic-ui-react';\n\ninterface Props {\n  setEditMode: (editMode: boolean) => void;\n}\n\nfunction ProfileEdit({ setEditMode }: Props) {\n  const {\n    profileStore: { profile, updateProfile },\n  } = useStore();\n\n  return (\n    <Formik\n      initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\n      onSubmit={(values) => {\n        updateProfile(values).then(() => {\n          setEditMode(false);\n        });\n      }}\n      validationSchema={Yup.object({\n        displayName: Yup.string().required(),\n      })}\n    >\n      {({ isSubmitting, isValid, dirty }) => (\n        <Form className=\"ui form\">\n          <MyTextInput placeholder=\"Display name\" name=\"displayName\" />\n          <MyTextArea rows={3} placeholder=\"Add your bio\" name=\"bio\" />\n\n          <Button\n            positive\n            type=\"submit\"\n            loading={isSubmitting}\n            content=\"Update Profile\"\n            floated=\"right\"\n            disabled={!isValid || !dirty}\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default observer(ProfileEdit);\n","import { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileEdit from './ProfileEdit';\n\nfunction ProfileAbout() {\n  const { profileStore } = useStore();\n  const { isCurrentUser, profile } = profileStore;\n  const [editMode, setEditMode] = useState(false);\n\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated=\"left\"\n            icon=\"user\"\n            content={`About ${profile?.username}`}\n          />\n\n          {isCurrentUser && (\n            <Button\n              floated=\"right\"\n              basic\n              content={editMode ? 'Cancel' : 'Edit Profile'}\n              onClick={() => setEditMode(!editMode)}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {editMode ? (\n            <ProfileEdit setEditMode={setEditMode} />\n          ) : (\n            <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n}\n\nexport default observer(ProfileAbout);\n","import React, { SyntheticEvent, useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { UserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { useStore } from '../../app/stores/store';\n\nconst panes = [\n  { menuItem: 'Future Events', pane: { key: 'future' } },\n  { menuItem: 'Past Events', pane: { key: 'past' } },\n  { menuItem: 'Hosting', pane: { key: 'hosting' } },\n];\n\nfunction ProfileActivities() {\n  const { profileStore } = useStore();\n  const { loadUserActivities, profile, loadingActivities, userActivities } =\n    profileStore;\n\n  useEffect(() => {\n    loadUserActivities(profile!.username);\n  }, [loadUserActivities, profile]);\n\n  const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n    loadUserActivities(\n      profile!.username,\n      panes[data.activeIndex as number].pane.key\n    );\n  };\n\n  return (\n    <Tab.Pane loading={loadingActivities}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated=\"left\" icon=\"calendar\" content={'Activities'} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4}>\n            {userActivities.map((activity: UserActivity) => (\n              <Card\n                as={Link}\n                to={`/activities/${activity.activityId}`}\n                key={activity.activityId}\n              >\n                <Image\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\n                  style={{ minHeight: 100, objectFit: 'cover' }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign=\"center\">{activity.title}</Card.Header>\n                  <Card.Meta textAlign=\"center\">\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n}\n\nexport default observer(ProfileActivities);\n","import { observer } from 'mobx-react-lite';\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nfunction ProfileFollowings() {\n  const {\n    profileStore: { profile, followings, loadingFollowings, activeTab },\n  } = useStore();\n\n  return (\n    <Tab.Pane loading={loadingFollowings}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated=\"left\"\n            icon=\"user\"\n            content={\n              activeTab === 3\n                ? `People following ${profile?.displayName}`\n                : `People ${profile?.displayName} is following`\n            }\n          />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Card.Group itemsPerRow={4}>\n            {followings.map((profile) => (\n              <ProfileCard key={profile.username} profile={profile} />\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n}\n\nexport default observer(ProfileFollowings);\n","import { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Header, Icon } from 'semantic-ui-react';\n\ninterface Props {\n  setFiles: (files: any) => void;\n}\n\nfunction PhotoWidgetDropzone({ setFiles }: Props) {\n  const dzStyles = {\n    border: 'dashed 3px #eee',\n    borderColor: '#eee',\n    borderRadius: '5px',\n    paddingTop: '30px',\n    textAlign: 'center' as 'center',\n    height: 200,\n  };\n\n  const dzActive = {\n    borderColor: 'green',\n  };\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      // Get a preview of hte file\n      setFiles(\n        acceptedFiles.map((file: any) =>\n          Object.assign(file, {\n            preview: URL.createObjectURL(file),\n          })\n        )\n      );\n    },\n    [setFiles]\n  );\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div\n      {...getRootProps()}\n      style={isDragActive ? { ...dzStyles, ...dzActive } : { ...dzStyles }}\n    >\n      <input {...getInputProps()} />\n\n      <Icon name=\"upload\" size=\"huge\" />\n      <Header content=\"Drop image here\" />\n    </div>\n  );\n}\n\nexport default PhotoWidgetDropzone;\n","import { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n  imagePreview: string;\n  setCropper: (cropper: Cropper) => void;\n}\n\nfunction PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\n  return (\n    <Cropper\n      src={imagePreview}\n      style={{ height: 200, width: '100%' }}\n      initialAspectRatio={1}\n      aspectRatio={1}\n      preview=\".img-preview\"\n      guides={false}\n      viewMode={1}\n      autoCropArea={1}\n      background={false}\n      onInitialized={(cropper) => setCropper(cropper)}\n    />\n  );\n}\n\nexport default PhotoWidgetCropper;\n","import { useEffect, useState } from 'react';\nimport { Grid, Header, Button } from 'semantic-ui-react';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\n\ninterface Props {\n  loading: boolean;\n  uploadPhoto: (file: Blob) => void;\n}\n\nfunction PhotoUploadWidget({ loading, uploadPhoto }: Props) {\n  const [files, setFiles] = useState<any>([]);\n\n  const [cropper, setCropper] = useState<Cropper>();\n\n  function onCrop() {\n    if (cropper) {\n      cropper.getCroppedCanvas().toBlob((blob) => uploadPhoto(blob!));\n    }\n  }\n\n  // clean up the component after it is used of\n  useEffect(() => {\n    return () => {\n      files.forEach((file: any) => URL.revokeObjectURL(file.preview));\n    };\n  }, [files]);\n\n  return (\n    <Grid>\n      <Grid.Column width={4}>\n        <Header sub color=\"teal\" content=\"Step 1 - Add Photo\" />\n        <PhotoWidgetDropzone setFiles={setFiles} />\n      </Grid.Column>\n      <Grid.Column width={1} />\n      <Grid.Column width={4}>\n        <Header sub color=\"teal\" content=\"Step 2 - Resize Image\" />\n        {files && files.length > 0 && (\n          <PhotoWidgetCropper\n            setCropper={setCropper}\n            imagePreview={files[0].preview}\n          />\n        )}\n      </Grid.Column>\n      <Grid.Column width={1} />\n      <Grid.Column width={4}>\n        <Header sub color=\"teal\" content=\"Step 3 - Preview and Upload\" />\n\n        {files && files.length > 0 && (\n          <>\n            <div\n              className=\"img-preview\"\n              style={{ minHeight: 200, overflow: 'hidden' }}\n            />\n            <Button.Group widths={2}>\n              <Button\n                disabled={loading}\n                loading={loading}\n                onClick={onCrop}\n                positive\n                icon=\"check\"\n              />\n              <Button\n                disabled={loading}\n                onClick={() => setFiles([])}\n                icon=\"close\"\n              />\n            </Button.Group>\n          </>\n        )}\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default PhotoUploadWidget;\n","import { observer } from 'mobx-react-lite';\nimport { SyntheticEvent, useState } from 'react';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n  profile: Profile;\n}\n\nfunction ProfilePhotos({ profile }: Props) {\n  const {\n    profileStore: {\n      isCurrentUser,\n      uploadPhoto,\n      uploading,\n      loading,\n      setMainPhoto,\n      deletePhoto,\n    },\n  } = useStore();\n\n  const [addPhotoMode, setAddPhotoMode] = useState<boolean>(false);\n\n  const [target, setTarget] = useState('');\n\n  const handleSetAddPhotoMode = () => {\n    setAddPhotoMode(!addPhotoMode);\n  };\n\n  function handlePhotoUpload(file: Blob) {\n    uploadPhoto(file).then(() => setAddPhotoMode(false));\n  }\n\n  function handleSetMainPhoto(\n    photo: Photo,\n    e: SyntheticEvent<HTMLButtonElement>\n  ) {\n    setTarget(e.currentTarget.name);\n    setMainPhoto(photo);\n  }\n\n  function handleDeletePhoto(\n    photo: Photo,\n    e: SyntheticEvent<HTMLButtonElement>\n  ) {\n    setTarget(e.currentTarget.name);\n    deletePhoto(photo);\n  }\n\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\n\n          {isCurrentUser && (\n            <Button\n              onClick={handleSetAddPhotoMode}\n              floated=\"right\"\n              basic\n              content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {addPhotoMode ? (\n            <PhotoUploadWidget\n              uploadPhoto={handlePhotoUpload}\n              loading={uploading}\n            />\n          ) : (\n            <Card.Group itemsPerRow={5}>\n              {profile.photos?.map((photo) => (\n                <Card key={photo.id}>\n                  <Image src={photo.url} />\n\n                  {isCurrentUser && (\n                    <Button.Group fluid widths={2}>\n                      <Button\n                        basic\n                        color=\"green\"\n                        content=\"Main\"\n                        name={'main' + photo.id}\n                        disabled={photo.isMain || loading}\n                        loading={target === 'main' + photo.id && loading}\n                        onClick={(e) => handleSetMainPhoto(photo, e)}\n                      />\n                      <Button\n                        onClick={(e) => handleDeletePhoto(photo, e)}\n                        loading={target === photo.id && loading}\n                        name={photo.id}\n                        basic\n                        disabled={photo.isMain || loading}\n                        color=\"red\"\n                        icon=\"trash\"\n                      />\n                    </Button.Group>\n                  )}\n                </Card>\n              ))}\n            </Card.Group>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n}\n\nexport default observer(ProfilePhotos);\n","import { observer } from 'mobx-react-lite';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileActivities from './ProfileActivities';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n\ninterface Props {\n  profile: Profile;\n}\n\nfunction ProfileContent({ profile }: Props) {\n  const { profileStore } = useStore();\n\n  const panes = [\n    { menuItem: 'About', render: () => <ProfileAbout /> },\n    { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\n    { menuItem: 'Events', render: () => <ProfileActivities /> },\n    {\n      menuItem: 'Followers',\n      render: () => <ProfileFollowings />,\n    },\n    {\n      menuItem: 'Following',\n      render: () => <ProfileFollowings />,\n    },\n  ];\n\n  return (\n    <Tab\n      menu={{ fluid: true, vertical: true }}\n      menuPosition=\"right\"\n      panes={panes}\n      onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n    />\n  );\n}\n\nexport default observer(ProfileContent);\n","import { Grid } from 'semantic-ui-react';\nimport ProfileHeader from './ProfileHeader';\nimport ProfileContent from './ProfileContent';\nimport { observer } from 'mobx-react-lite';\nimport { useParams } from 'react-router-dom';\nimport { useStore } from '../../app/stores/store';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\nimport { useEffect } from 'react';\n\nfunction ProfilePage() {\n  // grab the username from the url passed in\n  const { username } = useParams<{ username: string }>();\n\n  const { profileStore } = useStore();\n  const { loadProfile, loadingProfile, profile, setActiveTab } = profileStore;\n\n  useEffect(() => {\n    loadProfile(username);\n\n    return () => setActiveTab(0);\n  }, [loadProfile, username]);\n\n  if (loadingProfile) return <LoadingComponent content=\"Loading Profile ...\" />;\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        {profile && (\n          <>\n            <ProfileHeader profile={profile} />\n            <ProfileContent profile={profile} />\n          </>\n        )}\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default observer(ProfilePage);\n","import React from 'react';\nimport {\n  Redirect,\n  Route,\n  RouteComponentProps,\n  RouteProps,\n} from 'react-router-dom';\nimport { useStore } from '../stores/store';\n\ninterface Props extends RouteProps {\n  component:\n    | React.ComponentType<RouteComponentProps<any>>\n    | React.ComponentType<any>;\n}\n\nfunction PrivateRoute({ component: Component, ...rest }: Props) {\n  const {\n    userStore: { isLoggedIn },\n  } = useStore();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isLoggedIn ? <Component {...props} /> : <Redirect to=\"/\" />\n      }\n    />\n  );\n}\n\nexport default PrivateRoute;\n","import { Container } from 'semantic-ui-react';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport NavBar from './NavBar';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  // get the location so we can re-render the component as the route change\n  const location = useLocation();\n\n  // get the user info to persist logged in state\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setApploaded());\n    } else {\n      // check for facebook accesstoken\n      userStore.getFacebookLoginStatus().then(() => commonStore.setApploaded());\n    }\n  }, [commonStore, userStore]);\n\n  if (!commonStore.appLoaded)\n    return <LoadingComponent content=\"Loading app...\" />;\n\n  return (\n    <>\n      <ToastContainer position=\"bottom-right\" hideProgressBar />\n\n      <ModalContainer />\n\n      <Route exact path=\"/\" component={HomePage} />\n\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute\n                  exact\n                  path=\"/activities\"\n                  component={ActivityDashboard}\n                />\n                <PrivateRoute\n                  exact\n                  key={location.key}\n                  path={['/createActivity', '/manage/:id']}\n                  component={ActivityForm}\n                />\n\n                <PrivateRoute\n                  exact\n                  path=\"/activities/:id\"\n                  component={ActivityDetails}\n                />\n\n                <PrivateRoute\n                  exact\n                  path=\"/profiles/:username\"\n                  component={ProfilePage}\n                />\n\n                {/* Remove the following routes in build */}\n                <Route exact path=\"/errors\" component={TestErrors} />\n                <Route exact path=\"/server-error\" component={ServerError} />\n\n                {/* NOT FOUND PAGE - This is a fallback page when the route is not found */}\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n","import ReactDOM from 'react-dom';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}